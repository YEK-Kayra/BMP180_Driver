
BMP180_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004970  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004af8  08004af8  00014af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b48  08004b48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b50  08004b50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b50  08004b50  00014b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001f8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006fa9  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000013f0  00000000  00000000  0002708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006e8  00000000  00000000  00028480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000549  00000000  00000000  00028b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001febb  00000000  00000000  000290b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000095f9  00000000  00000000  00048f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c221c  00000000  00000000  00052565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000021f0  00000000  00000000  00114784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00116974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ae0 	.word	0x08004ae0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004ae0 	.word	0x08004ae0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b970 	b.w	8000e28 <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	9e08      	ldr	r6, [sp, #32]
 8000b66:	460d      	mov	r5, r1
 8000b68:	4604      	mov	r4, r0
 8000b6a:	460f      	mov	r7, r1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d14a      	bne.n	8000c06 <__udivmoddi4+0xa6>
 8000b70:	428a      	cmp	r2, r1
 8000b72:	4694      	mov	ip, r2
 8000b74:	d965      	bls.n	8000c42 <__udivmoddi4+0xe2>
 8000b76:	fab2 f382 	clz	r3, r2
 8000b7a:	b143      	cbz	r3, 8000b8e <__udivmoddi4+0x2e>
 8000b7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b80:	f1c3 0220 	rsb	r2, r3, #32
 8000b84:	409f      	lsls	r7, r3
 8000b86:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8a:	4317      	orrs	r7, r2
 8000b8c:	409c      	lsls	r4, r3
 8000b8e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b92:	fa1f f58c 	uxth.w	r5, ip
 8000b96:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b9a:	0c22      	lsrs	r2, r4, #16
 8000b9c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba4:	fb01 f005 	mul.w	r0, r1, r5
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	d90a      	bls.n	8000bc2 <__udivmoddi4+0x62>
 8000bac:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bb4:	f080 811c 	bcs.w	8000df0 <__udivmoddi4+0x290>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f240 8119 	bls.w	8000df0 <__udivmoddi4+0x290>
 8000bbe:	3902      	subs	r1, #2
 8000bc0:	4462      	add	r2, ip
 8000bc2:	1a12      	subs	r2, r2, r0
 8000bc4:	b2a4      	uxth	r4, r4
 8000bc6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bca:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd2:	fb00 f505 	mul.w	r5, r0, r5
 8000bd6:	42a5      	cmp	r5, r4
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x90>
 8000bda:	eb1c 0404 	adds.w	r4, ip, r4
 8000bde:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be2:	f080 8107 	bcs.w	8000df4 <__udivmoddi4+0x294>
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	f240 8104 	bls.w	8000df4 <__udivmoddi4+0x294>
 8000bec:	4464      	add	r4, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bf4:	1b64      	subs	r4, r4, r5
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11e      	cbz	r6, 8000c02 <__udivmoddi4+0xa2>
 8000bfa:	40dc      	lsrs	r4, r3
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e9c6 4300 	strd	r4, r3, [r6]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0xbc>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	f000 80ed 	beq.w	8000dea <__udivmoddi4+0x28a>
 8000c10:	2100      	movs	r1, #0
 8000c12:	e9c6 0500 	strd	r0, r5, [r6]
 8000c16:	4608      	mov	r0, r1
 8000c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1c:	fab3 f183 	clz	r1, r3
 8000c20:	2900      	cmp	r1, #0
 8000c22:	d149      	bne.n	8000cb8 <__udivmoddi4+0x158>
 8000c24:	42ab      	cmp	r3, r5
 8000c26:	d302      	bcc.n	8000c2e <__udivmoddi4+0xce>
 8000c28:	4282      	cmp	r2, r0
 8000c2a:	f200 80f8 	bhi.w	8000e1e <__udivmoddi4+0x2be>
 8000c2e:	1a84      	subs	r4, r0, r2
 8000c30:	eb65 0203 	sbc.w	r2, r5, r3
 8000c34:	2001      	movs	r0, #1
 8000c36:	4617      	mov	r7, r2
 8000c38:	2e00      	cmp	r6, #0
 8000c3a:	d0e2      	beq.n	8000c02 <__udivmoddi4+0xa2>
 8000c3c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c40:	e7df      	b.n	8000c02 <__udivmoddi4+0xa2>
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xe6>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f382 	clz	r3, r2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8090 	bne.w	8000d70 <__udivmoddi4+0x210>
 8000c50:	1a8a      	subs	r2, r1, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c60:	fb07 2015 	mls	r0, r7, r5, r2
 8000c64:	0c22      	lsrs	r2, r4, #16
 8000c66:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c6a:	fb0e f005 	mul.w	r0, lr, r5
 8000c6e:	4290      	cmp	r0, r2
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x124>
 8000c72:	eb1c 0202 	adds.w	r2, ip, r2
 8000c76:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x122>
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	f200 80cb 	bhi.w	8000e18 <__udivmoddi4+0x2b8>
 8000c82:	4645      	mov	r5, r8
 8000c84:	1a12      	subs	r2, r2, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c8c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c94:	fb0e fe00 	mul.w	lr, lr, r0
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x14e>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	d202      	bcs.n	8000cac <__udivmoddi4+0x14c>
 8000ca6:	45a6      	cmp	lr, r4
 8000ca8:	f200 80bb 	bhi.w	8000e22 <__udivmoddi4+0x2c2>
 8000cac:	4610      	mov	r0, r2
 8000cae:	eba4 040e 	sub.w	r4, r4, lr
 8000cb2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cb6:	e79f      	b.n	8000bf8 <__udivmoddi4+0x98>
 8000cb8:	f1c1 0720 	rsb	r7, r1, #32
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cca:	fa20 f307 	lsr.w	r3, r0, r7
 8000cce:	40fd      	lsrs	r5, r7
 8000cd0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	fb09 5518 	mls	r5, r9, r8, r5
 8000ce2:	0c1c      	lsrs	r4, r3, #16
 8000ce4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cec:	42a5      	cmp	r5, r4
 8000cee:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cf6:	d90b      	bls.n	8000d10 <__udivmoddi4+0x1b0>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d00:	f080 8088 	bcs.w	8000e14 <__udivmoddi4+0x2b4>
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	f240 8085 	bls.w	8000e14 <__udivmoddi4+0x2b4>
 8000d0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0e:	4464      	add	r4, ip
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	b29d      	uxth	r5, r3
 8000d14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d18:	fb09 4413 	mls	r4, r9, r3, r4
 8000d1c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d20:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1da>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d30:	d26c      	bcs.n	8000e0c <__udivmoddi4+0x2ac>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	d96a      	bls.n	8000e0c <__udivmoddi4+0x2ac>
 8000d36:	3b02      	subs	r3, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	42ac      	cmp	r4, r5
 8000d48:	46c8      	mov	r8, r9
 8000d4a:	46ae      	mov	lr, r5
 8000d4c:	d356      	bcc.n	8000dfc <__udivmoddi4+0x29c>
 8000d4e:	d053      	beq.n	8000df8 <__udivmoddi4+0x298>
 8000d50:	b156      	cbz	r6, 8000d68 <__udivmoddi4+0x208>
 8000d52:	ebb0 0208 	subs.w	r2, r0, r8
 8000d56:	eb64 040e 	sbc.w	r4, r4, lr
 8000d5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5e:	40ca      	lsrs	r2, r1
 8000d60:	40cc      	lsrs	r4, r1
 8000d62:	4317      	orrs	r7, r2
 8000d64:	e9c6 7400 	strd	r7, r4, [r6]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d70:	f1c3 0120 	rsb	r1, r3, #32
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	fa20 f201 	lsr.w	r2, r0, r1
 8000d7c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d80:	409d      	lsls	r5, r3
 8000d82:	432a      	orrs	r2, r5
 8000d84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d90:	fb07 1510 	mls	r5, r7, r0, r1
 8000d94:	0c11      	lsrs	r1, r2, #16
 8000d96:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d9a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d9e:	428d      	cmp	r5, r1
 8000da0:	fa04 f403 	lsl.w	r4, r4, r3
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x258>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dae:	d22f      	bcs.n	8000e10 <__udivmoddi4+0x2b0>
 8000db0:	428d      	cmp	r5, r1
 8000db2:	d92d      	bls.n	8000e10 <__udivmoddi4+0x2b0>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1b49      	subs	r1, r1, r5
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dc0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dcc:	4291      	cmp	r1, r2
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x282>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd8:	d216      	bcs.n	8000e08 <__udivmoddi4+0x2a8>
 8000dda:	4291      	cmp	r1, r2
 8000ddc:	d914      	bls.n	8000e08 <__udivmoddi4+0x2a8>
 8000dde:	3d02      	subs	r5, #2
 8000de0:	4462      	add	r2, ip
 8000de2:	1a52      	subs	r2, r2, r1
 8000de4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000de8:	e738      	b.n	8000c5c <__udivmoddi4+0xfc>
 8000dea:	4631      	mov	r1, r6
 8000dec:	4630      	mov	r0, r6
 8000dee:	e708      	b.n	8000c02 <__udivmoddi4+0xa2>
 8000df0:	4639      	mov	r1, r7
 8000df2:	e6e6      	b.n	8000bc2 <__udivmoddi4+0x62>
 8000df4:	4610      	mov	r0, r2
 8000df6:	e6fb      	b.n	8000bf0 <__udivmoddi4+0x90>
 8000df8:	4548      	cmp	r0, r9
 8000dfa:	d2a9      	bcs.n	8000d50 <__udivmoddi4+0x1f0>
 8000dfc:	ebb9 0802 	subs.w	r8, r9, r2
 8000e00:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e04:	3b01      	subs	r3, #1
 8000e06:	e7a3      	b.n	8000d50 <__udivmoddi4+0x1f0>
 8000e08:	4645      	mov	r5, r8
 8000e0a:	e7ea      	b.n	8000de2 <__udivmoddi4+0x282>
 8000e0c:	462b      	mov	r3, r5
 8000e0e:	e794      	b.n	8000d3a <__udivmoddi4+0x1da>
 8000e10:	4640      	mov	r0, r8
 8000e12:	e7d1      	b.n	8000db8 <__udivmoddi4+0x258>
 8000e14:	46d0      	mov	r8, sl
 8000e16:	e77b      	b.n	8000d10 <__udivmoddi4+0x1b0>
 8000e18:	3d02      	subs	r5, #2
 8000e1a:	4462      	add	r2, ip
 8000e1c:	e732      	b.n	8000c84 <__udivmoddi4+0x124>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e70a      	b.n	8000c38 <__udivmoddi4+0xd8>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	e742      	b.n	8000cae <__udivmoddi4+0x14e>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <BMP180_Init>:
/**
 * @fn     HAL_StatusTypeDef BMP180_Init(void)
 * @brief  This function provide to check the I2C bus is suitable to communicate. If not Warning Led is HIGH									@arg "3" 64 Byte Operations
 * @retval HAL Status
 */
HAL_StatusTypeDef BMP180_Init(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

	if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_I2C_WRITE_ADDRESS, 5, 1000) != HAL_OK){
 8000e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e34:	2205      	movs	r2, #5
 8000e36:	21ee      	movs	r1, #238	; 0xee
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <BMP180_Init+0x34>)
 8000e3a:	f001 fe17 	bl	8002a6c <HAL_I2C_IsDeviceReady>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <BMP180_Init+0x28>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <BMP180_Init+0x38>)
 8000e4c:	f001 f990 	bl	8002170 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e002      	b.n	8000e5a <BMP180_Init+0x2e>
		while(1);
	}
	BMP180_Get_And_Check_CalibrationDatas();
 8000e54:	f000 f808 	bl	8000e68 <BMP180_Get_And_Check_CalibrationDatas>
	return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000d8 	.word	0x200000d8
 8000e64:	40020c00 	.word	0x40020c00

08000e68 <BMP180_Get_And_Check_CalibrationDatas>:
/**
 * @fn     HAL_StatusTypeDef BMP180_Get_And_Check_CalibrationDatas(void)
 * @brief  This function provide to check the Calibration Datas after read from sensor's EEPROM. If any value is 0x00 or 0xFF Warning Led is HIGH
 * @retval HAL Status
 */
HAL_StatusTypeDef BMP180_Get_And_Check_CalibrationDatas(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af04      	add	r7, sp, #16

uint8_t Array_CalibrationData[CalibrationCoefficient_Lenght] = {0};
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	821a      	strh	r2, [r3, #16]
uint8_t cnt = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	75fb      	strb	r3, [r7, #23]

HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_I2C_READ_ADDRESS, Calibration_Reg_Start_Address, 1, Array_CalibrationData, CalibrationCoefficient_Lenght, 10000);
 8000e84:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2316      	movs	r3, #22
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	463b      	mov	r3, r7
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	22aa      	movs	r2, #170	; 0xaa
 8000e96:	21ef      	movs	r1, #239	; 0xef
 8000e98:	48ae      	ldr	r0, [pc, #696]	; (8001154 <BMP180_Get_And_Check_CalibrationDatas+0x2ec>)
 8000e9a:	f001 fbc1 	bl	8002620 <HAL_I2C_Mem_Read>

AC1 =  (int16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	3318      	adds	r3, #24
 8000ea2:	443b      	add	r3, r7
 8000ea4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21a      	sxth	r2, r3
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	3318      	adds	r3, #24
 8000eb2:	443b      	add	r3, r7
 8000eb4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	4ba6      	ldr	r3, [pc, #664]	; (8001158 <BMP180_Get_And_Check_CalibrationDatas+0x2f0>)
 8000ec0:	801a      	strh	r2, [r3, #0]
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	75fb      	strb	r3, [r7, #23]
AC2 =  (int16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	3318      	adds	r3, #24
 8000ecc:	443b      	add	r3, r7
 8000ece:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	3318      	adds	r3, #24
 8000edc:	443b      	add	r3, r7
 8000ede:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b9c      	ldr	r3, [pc, #624]	; (800115c <BMP180_Get_And_Check_CalibrationDatas+0x2f4>)
 8000eea:	801a      	strh	r2, [r3, #0]
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	3302      	adds	r3, #2
 8000ef0:	75fb      	strb	r3, [r7, #23]
AC3 =  (int16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	3318      	adds	r3, #24
 8000ef6:	443b      	add	r3, r7
 8000ef8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	3301      	adds	r3, #1
 8000f04:	3318      	adds	r3, #24
 8000f06:	443b      	add	r3, r7
 8000f08:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	4b93      	ldr	r3, [pc, #588]	; (8001160 <BMP180_Get_And_Check_CalibrationDatas+0x2f8>)
 8000f14:	801a      	strh	r2, [r3, #0]
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	3302      	adds	r3, #2
 8000f1a:	75fb      	strb	r3, [r7, #23]
AC4 = (uint16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	3318      	adds	r3, #24
 8000f20:	443b      	add	r3, r7
 8000f22:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	3318      	adds	r3, #24
 8000f30:	443b      	add	r3, r7
 8000f32:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b89      	ldr	r3, [pc, #548]	; (8001164 <BMP180_Get_And_Check_CalibrationDatas+0x2fc>)
 8000f40:	801a      	strh	r2, [r3, #0]
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
 8000f44:	3302      	adds	r3, #2
 8000f46:	75fb      	strb	r3, [r7, #23]
AC5 = (uint16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	3318      	adds	r3, #24
 8000f4c:	443b      	add	r3, r7
 8000f4e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	443b      	add	r3, r7
 8000f5e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b7f      	ldr	r3, [pc, #508]	; (8001168 <BMP180_Get_And_Check_CalibrationDatas+0x300>)
 8000f6c:	801a      	strh	r2, [r3, #0]
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]
 8000f70:	3302      	adds	r3, #2
 8000f72:	75fb      	strb	r3, [r7, #23]
AC6 = (uint16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	3318      	adds	r3, #24
 8000f78:	443b      	add	r3, r7
 8000f7a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	3301      	adds	r3, #1
 8000f86:	3318      	adds	r3, #24
 8000f88:	443b      	add	r3, r7
 8000f8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b75      	ldr	r3, [pc, #468]	; (800116c <BMP180_Get_And_Check_CalibrationDatas+0x304>)
 8000f98:	801a      	strh	r2, [r3, #0]
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	75fb      	strb	r3, [r7, #23]
B1  =  (int16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3318      	adds	r3, #24
 8000fa4:	443b      	add	r3, r7
 8000fa6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <BMP180_Get_And_Check_CalibrationDatas+0x308>)
 8000fc2:	801a      	strh	r2, [r3, #0]
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	75fb      	strb	r3, [r7, #23]
B2  =  (int16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	3318      	adds	r3, #24
 8000fce:	443b      	add	r3, r7
 8000fd0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	3318      	adds	r3, #24
 8000fde:	443b      	add	r3, r7
 8000fe0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	4b62      	ldr	r3, [pc, #392]	; (8001174 <BMP180_Get_And_Check_CalibrationDatas+0x30c>)
 8000fec:	801a      	strh	r2, [r3, #0]
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	75fb      	strb	r3, [r7, #23]
MB  =  (int16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	443b      	add	r3, r7
 8000ffa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	3301      	adds	r3, #1
 8001006:	3318      	adds	r3, #24
 8001008:	443b      	add	r3, r7
 800100a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b58      	ldr	r3, [pc, #352]	; (8001178 <BMP180_Get_And_Check_CalibrationDatas+0x310>)
 8001016:	801a      	strh	r2, [r3, #0]
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	3302      	adds	r3, #2
 800101c:	75fb      	strb	r3, [r7, #23]
MC  =  (int16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	3318      	adds	r3, #24
 8001022:	443b      	add	r3, r7
 8001024:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	3301      	adds	r3, #1
 8001030:	3318      	adds	r3, #24
 8001032:	443b      	add	r3, r7
 8001034:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b4f      	ldr	r3, [pc, #316]	; (800117c <BMP180_Get_And_Check_CalibrationDatas+0x314>)
 8001040:	801a      	strh	r2, [r3, #0]
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	3302      	adds	r3, #2
 8001046:	75fb      	strb	r3, [r7, #23]
MD  =  (int16_t)((Array_CalibrationData[cnt]<<8) | Array_CalibrationData[cnt+1]); cnt+=2;
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	3318      	adds	r3, #24
 800104c:	443b      	add	r3, r7
 800104e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	3301      	adds	r3, #1
 800105a:	3318      	adds	r3, #24
 800105c:	443b      	add	r3, r7
 800105e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <BMP180_Get_And_Check_CalibrationDatas+0x318>)
 800106a:	801a      	strh	r2, [r3, #0]
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	3302      	adds	r3, #2
 8001070:	75fb      	strb	r3, [r7, #23]

if(AC1 == 0x00 || AC1 == 0xFF){
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <BMP180_Get_And_Check_CalibrationDatas+0x2f0>)
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <BMP180_Get_And_Check_CalibrationDatas+0x21e>
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <BMP180_Get_And_Check_CalibrationDatas+0x2f0>)
 800107e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001082:	2bff      	cmp	r3, #255	; 0xff
 8001084:	d106      	bne.n	8001094 <BMP180_Get_And_Check_CalibrationDatas+0x22c>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108c:	483d      	ldr	r0, [pc, #244]	; (8001184 <BMP180_Get_And_Check_CalibrationDatas+0x31c>)
 800108e:	f001 f86f 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 8001092:	e7fe      	b.n	8001092 <BMP180_Get_And_Check_CalibrationDatas+0x22a>
}
else if(AC2 == 0x00 || AC2 == 0xFF){
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <BMP180_Get_And_Check_CalibrationDatas+0x2f4>)
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <BMP180_Get_And_Check_CalibrationDatas+0x240>
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <BMP180_Get_And_Check_CalibrationDatas+0x2f4>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	2bff      	cmp	r3, #255	; 0xff
 80010a6:	d106      	bne.n	80010b6 <BMP180_Get_And_Check_CalibrationDatas+0x24e>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ae:	4835      	ldr	r0, [pc, #212]	; (8001184 <BMP180_Get_And_Check_CalibrationDatas+0x31c>)
 80010b0:	f001 f85e 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 80010b4:	e7fe      	b.n	80010b4 <BMP180_Get_And_Check_CalibrationDatas+0x24c>
}
else if(AC3 == 0x00 || AC3 == 0xFF){
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <BMP180_Get_And_Check_CalibrationDatas+0x2f8>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <BMP180_Get_And_Check_CalibrationDatas+0x262>
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <BMP180_Get_And_Check_CalibrationDatas+0x2f8>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2bff      	cmp	r3, #255	; 0xff
 80010c8:	d106      	bne.n	80010d8 <BMP180_Get_And_Check_CalibrationDatas+0x270>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d0:	482c      	ldr	r0, [pc, #176]	; (8001184 <BMP180_Get_And_Check_CalibrationDatas+0x31c>)
 80010d2:	f001 f84d 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 80010d6:	e7fe      	b.n	80010d6 <BMP180_Get_And_Check_CalibrationDatas+0x26e>
}
else if(AC4 == 0x00 || AC4 == 0xFF){
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <BMP180_Get_And_Check_CalibrationDatas+0x2fc>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <BMP180_Get_And_Check_CalibrationDatas+0x280>
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <BMP180_Get_And_Check_CalibrationDatas+0x2fc>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2bff      	cmp	r3, #255	; 0xff
 80010e6:	d106      	bne.n	80010f6 <BMP180_Get_And_Check_CalibrationDatas+0x28e>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ee:	4825      	ldr	r0, [pc, #148]	; (8001184 <BMP180_Get_And_Check_CalibrationDatas+0x31c>)
 80010f0:	f001 f83e 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 80010f4:	e7fe      	b.n	80010f4 <BMP180_Get_And_Check_CalibrationDatas+0x28c>
}
else if(AC5 == 0x00 || AC5 == 0xFF){
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <BMP180_Get_And_Check_CalibrationDatas+0x300>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <BMP180_Get_And_Check_CalibrationDatas+0x29e>
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <BMP180_Get_And_Check_CalibrationDatas+0x300>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	2bff      	cmp	r3, #255	; 0xff
 8001104:	d106      	bne.n	8001114 <BMP180_Get_And_Check_CalibrationDatas+0x2ac>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110c:	481d      	ldr	r0, [pc, #116]	; (8001184 <BMP180_Get_And_Check_CalibrationDatas+0x31c>)
 800110e:	f001 f82f 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 8001112:	e7fe      	b.n	8001112 <BMP180_Get_And_Check_CalibrationDatas+0x2aa>
}
else if(AC6 == 0x00 || AC6 == 0xFF){
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <BMP180_Get_And_Check_CalibrationDatas+0x304>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <BMP180_Get_And_Check_CalibrationDatas+0x2bc>
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <BMP180_Get_And_Check_CalibrationDatas+0x304>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2bff      	cmp	r3, #255	; 0xff
 8001122:	d106      	bne.n	8001132 <BMP180_Get_And_Check_CalibrationDatas+0x2ca>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <BMP180_Get_And_Check_CalibrationDatas+0x31c>)
 800112c:	f001 f820 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 8001130:	e7fe      	b.n	8001130 <BMP180_Get_And_Check_CalibrationDatas+0x2c8>
}
else if(B1 == 0x00 || B1 == 0xFF){
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <BMP180_Get_And_Check_CalibrationDatas+0x308>)
 8001134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <BMP180_Get_And_Check_CalibrationDatas+0x2de>
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <BMP180_Get_And_Check_CalibrationDatas+0x308>)
 800113e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001142:	2bff      	cmp	r3, #255	; 0xff
 8001144:	d120      	bne.n	8001188 <BMP180_Get_And_Check_CalibrationDatas+0x320>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <BMP180_Get_And_Check_CalibrationDatas+0x31c>)
 800114e:	f001 f80f 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 8001152:	e7fe      	b.n	8001152 <BMP180_Get_And_Check_CalibrationDatas+0x2ea>
 8001154:	200000d8 	.word	0x200000d8
 8001158:	2000008c 	.word	0x2000008c
 800115c:	2000008e 	.word	0x2000008e
 8001160:	20000090 	.word	0x20000090
 8001164:	20000092 	.word	0x20000092
 8001168:	20000094 	.word	0x20000094
 800116c:	20000096 	.word	0x20000096
 8001170:	20000098 	.word	0x20000098
 8001174:	2000009a 	.word	0x2000009a
 8001178:	2000009c 	.word	0x2000009c
 800117c:	2000009e 	.word	0x2000009e
 8001180:	200000a0 	.word	0x200000a0
 8001184:	40020c00 	.word	0x40020c00
}
else if(B2 == 0x00 || B2 == 0xFF){
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <BMP180_Get_And_Check_CalibrationDatas+0x3b4>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <BMP180_Get_And_Check_CalibrationDatas+0x334>
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <BMP180_Get_And_Check_CalibrationDatas+0x3b4>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	2bff      	cmp	r3, #255	; 0xff
 800119a:	d106      	bne.n	80011aa <BMP180_Get_And_Check_CalibrationDatas+0x342>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	481f      	ldr	r0, [pc, #124]	; (8001220 <BMP180_Get_And_Check_CalibrationDatas+0x3b8>)
 80011a4:	f000 ffe4 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 80011a8:	e7fe      	b.n	80011a8 <BMP180_Get_And_Check_CalibrationDatas+0x340>
}
else if(MB == 0x00 || MB == 0xFF){
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <BMP180_Get_And_Check_CalibrationDatas+0x3bc>)
 80011ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <BMP180_Get_And_Check_CalibrationDatas+0x356>
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <BMP180_Get_And_Check_CalibrationDatas+0x3bc>)
 80011b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ba:	2bff      	cmp	r3, #255	; 0xff
 80011bc:	d106      	bne.n	80011cc <BMP180_Get_And_Check_CalibrationDatas+0x364>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <BMP180_Get_And_Check_CalibrationDatas+0x3b8>)
 80011c6:	f000 ffd3 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 80011ca:	e7fe      	b.n	80011ca <BMP180_Get_And_Check_CalibrationDatas+0x362>
}
else if(MC == 0x00 || MC == 0xFF){
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <BMP180_Get_And_Check_CalibrationDatas+0x3c0>)
 80011ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <BMP180_Get_And_Check_CalibrationDatas+0x378>
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <BMP180_Get_And_Check_CalibrationDatas+0x3c0>)
 80011d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011dc:	2bff      	cmp	r3, #255	; 0xff
 80011de:	d106      	bne.n	80011ee <BMP180_Get_And_Check_CalibrationDatas+0x386>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <BMP180_Get_And_Check_CalibrationDatas+0x3b8>)
 80011e8:	f000 ffc2 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 80011ec:	e7fe      	b.n	80011ec <BMP180_Get_And_Check_CalibrationDatas+0x384>
}
else if(MD == 0x00 || MD == 0xFF){
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <BMP180_Get_And_Check_CalibrationDatas+0x3c4>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <BMP180_Get_And_Check_CalibrationDatas+0x39a>
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <BMP180_Get_And_Check_CalibrationDatas+0x3c4>)
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d106      	bne.n	8001210 <BMP180_Get_And_Check_CalibrationDatas+0x3a8>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <BMP180_Get_And_Check_CalibrationDatas+0x3b8>)
 800120a:	f000 ffb1 	bl	8002170 <HAL_GPIO_WritePin>
	while(1);
 800120e:	e7fe      	b.n	800120e <BMP180_Get_And_Check_CalibrationDatas+0x3a6>
}
return HAL_OK;
 8001210:	2300      	movs	r3, #0

}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000009a 	.word	0x2000009a
 8001220:	40020c00 	.word	0x40020c00
 8001224:	2000009c 	.word	0x2000009c
 8001228:	2000009e 	.word	0x2000009e
 800122c:	200000a0 	.word	0x200000a0

08001230 <BMP180_Get_TempatureDatas>:
/**
 * @fn     long BMP180_Get_TempatureDatas()
 * @brief  This function provide to get Real Temperature Values by using Uncompensated Temperature Values
 * @retval Real_Temperature
 */
long BMP180_Get_TempatureDatas(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af04      	add	r7, sp, #16


	uint8_t UTemperature_MSB_LSB[2] = {0};
 8001236:	2300      	movs	r3, #0
 8001238:	80bb      	strh	r3, [r7, #4]
	uint8_t UTemperature_ConstantVal[1] = {0x2E};
 800123a:	232e      	movs	r3, #46	; 0x2e
 800123c:	703b      	strb	r3, [r7, #0]


	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_I2C_WRITE_ADDRESS, 0xF4, 1, UTemperature_ConstantVal, 1, 10000);
 800123e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001242:	9302      	str	r3, [sp, #8]
 8001244:	2301      	movs	r3, #1
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	463b      	mov	r3, r7
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	22f4      	movs	r2, #244	; 0xf4
 8001250:	21ee      	movs	r1, #238	; 0xee
 8001252:	4829      	ldr	r0, [pc, #164]	; (80012f8 <BMP180_Get_TempatureDatas+0xc8>)
 8001254:	f001 f8ea 	bl	800242c <HAL_I2C_Mem_Write>

	HAL_Delay(5);
 8001258:	2005      	movs	r0, #5
 800125a:	f000 fce3 	bl	8001c24 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_I2C_READ_ADDRESS, 0xF6, 1, UTemperature_MSB_LSB, 2, 10000);
 800125e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2302      	movs	r3, #2
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	22f6      	movs	r2, #246	; 0xf6
 8001270:	21ef      	movs	r1, #239	; 0xef
 8001272:	4821      	ldr	r0, [pc, #132]	; (80012f8 <BMP180_Get_TempatureDatas+0xc8>)
 8001274:	f001 f9d4 	bl	8002620 <HAL_I2C_Mem_Read>

	Uncompensated_Temperature = (uint32_t)(UTemperature_MSB_LSB[0]<<8 | UTemperature_MSB_LSB[1]);
 8001278:	793b      	ldrb	r3, [r7, #4]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	797a      	ldrb	r2, [r7, #5]
 800127e:	4313      	orrs	r3, r2
 8001280:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <BMP180_Get_TempatureDatas+0xcc>)
 8001282:	6013      	str	r3, [r2, #0]


	X1  = ((Uncompensated_Temperature - AC6) * AC5) / 32768;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <BMP180_Get_TempatureDatas+0xcc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <BMP180_Get_TempatureDatas+0xd0>)
 800128a:	8812      	ldrh	r2, [r2, #0]
 800128c:	1a9b      	subs	r3, r3, r2
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <BMP180_Get_TempatureDatas+0xd4>)
 8001290:	8812      	ldrh	r2, [r2, #0]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	da02      	bge.n	80012a0 <BMP180_Get_TempatureDatas+0x70>
 800129a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800129e:	337f      	adds	r3, #127	; 0x7f
 80012a0:	13db      	asrs	r3, r3, #15
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <BMP180_Get_TempatureDatas+0xd8>)
 80012a6:	601a      	str	r2, [r3, #0]
	X2  = ((MC * 2048) / (X1 + MD));
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <BMP180_Get_TempatureDatas+0xdc>)
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	02da      	lsls	r2, r3, #11
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <BMP180_Get_TempatureDatas+0xe0>)
 80012b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <BMP180_Get_TempatureDatas+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	440b      	add	r3, r1
 80012be:	fb92 f3f3 	sdiv	r3, r2, r3
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <BMP180_Get_TempatureDatas+0xe4>)
 80012c4:	6013      	str	r3, [r2, #0]
	B5  = (X1 + X2);
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <BMP180_Get_TempatureDatas+0xd8>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <BMP180_Get_TempatureDatas+0xe4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <BMP180_Get_TempatureDatas+0xe8>)
 80012d2:	6013      	str	r3, [r2, #0]
	Real_Temperature = (long)((B5 + 8) / 16) / 10 ;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <BMP180_Get_TempatureDatas+0xe8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3308      	adds	r3, #8
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <BMP180_Get_TempatureDatas+0xec>)
 80012dc:	fb82 1203 	smull	r1, r2, r2, r3
 80012e0:	1192      	asrs	r2, r2, #6
 80012e2:	17db      	asrs	r3, r3, #31
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <BMP180_Get_TempatureDatas+0xf0>)
 80012e8:	6013      	str	r3, [r2, #0]
	return Real_Temperature;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <BMP180_Get_TempatureDatas+0xf0>)
 80012ec:	681b      	ldr	r3, [r3, #0]

}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200000d8 	.word	0x200000d8
 80012fc:	200000b0 	.word	0x200000b0
 8001300:	20000096 	.word	0x20000096
 8001304:	20000094 	.word	0x20000094
 8001308:	200000a4 	.word	0x200000a4
 800130c:	2000009e 	.word	0x2000009e
 8001310:	200000a0 	.word	0x200000a0
 8001314:	200000a8 	.word	0x200000a8
 8001318:	200000ac 	.word	0x200000ac
 800131c:	66666667 	.word	0x66666667
 8001320:	200000b4 	.word	0x200000b4

08001324 <BMP180_Get_PressureDatas>:
/**
 * @fn     long BMP180_Get_PressureDatas()
 * @brief  This function provide to get Real Pressure Values by using Uncompensated Pressure Values
 * @retval Real_Pressure
 */
long BMP180_Get_PressureDatas(){
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af04      	add	r7, sp, #16

	uint8_t UPressure_MSB_LSB_XLSB[3] = {0};
 800132a:	4b8d      	ldr	r3, [pc, #564]	; (8001560 <BMP180_Get_PressureDatas+0x23c>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	80bb      	strh	r3, [r7, #4]
 8001330:	2300      	movs	r3, #0
 8001332:	71bb      	strb	r3, [r7, #6]
	uint8_t UPressure_ConstantVal[1] = {0xF4};
 8001334:	23f4      	movs	r3, #244	; 0xf4
 8001336:	703b      	strb	r3, [r7, #0]

	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_I2C_WRITE_ADDRESS, 0xF4, 1, UPressure_ConstantVal, 1, 10000);
 8001338:	f242 7310 	movw	r3, #10000	; 0x2710
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2301      	movs	r3, #1
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	463b      	mov	r3, r7
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	22f4      	movs	r2, #244	; 0xf4
 800134a:	21ee      	movs	r1, #238	; 0xee
 800134c:	4885      	ldr	r0, [pc, #532]	; (8001564 <BMP180_Get_PressureDatas+0x240>)
 800134e:	f001 f86d 	bl	800242c <HAL_I2C_Mem_Write>

	HAL_Delay(80);
 8001352:	2050      	movs	r0, #80	; 0x50
 8001354:	f000 fc66 	bl	8001c24 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_I2C_READ_ADDRESS, 0xF6, 1, UPressure_MSB_LSB_XLSB, 3, 10000);
 8001358:	f242 7310 	movw	r3, #10000	; 0x2710
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2303      	movs	r3, #3
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	22f6      	movs	r2, #246	; 0xf6
 800136a:	21ef      	movs	r1, #239	; 0xef
 800136c:	487d      	ldr	r0, [pc, #500]	; (8001564 <BMP180_Get_PressureDatas+0x240>)
 800136e:	f001 f957 	bl	8002620 <HAL_I2C_Mem_Read>

	Uncompensated_Pressure = (((UPressure_MSB_LSB_XLSB[0]<<16) | (UPressure_MSB_LSB_XLSB[1]<<8) | (UPressure_MSB_LSB_XLSB[2])) >> (8-OverSamplingSetting));
 8001372:	793b      	ldrb	r3, [r7, #4]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	797b      	ldrb	r3, [r7, #5]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	4313      	orrs	r3, r2
 800137c:	79ba      	ldrb	r2, [r7, #6]
 800137e:	4313      	orrs	r3, r2
 8001380:	115b      	asrs	r3, r3, #5
 8001382:	4a79      	ldr	r2, [pc, #484]	; (8001568 <BMP180_Get_PressureDatas+0x244>)
 8001384:	6013      	str	r3, [r2, #0]


	B6  = (B5 - 4000);
 8001386:	4b79      	ldr	r3, [pc, #484]	; (800156c <BMP180_Get_PressureDatas+0x248>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800138e:	4a78      	ldr	r2, [pc, #480]	; (8001570 <BMP180_Get_PressureDatas+0x24c>)
 8001390:	6013      	str	r3, [r2, #0]
	X1  = ((B2 * (B6 * B6 / pow(2,12))) / pow(2,11));
 8001392:	4b78      	ldr	r3, [pc, #480]	; (8001574 <BMP180_Get_PressureDatas+0x250>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f867 	bl	800046c <__aeabi_i2d>
 800139e:	4604      	mov	r4, r0
 80013a0:	460d      	mov	r5, r1
 80013a2:	4b73      	ldr	r3, [pc, #460]	; (8001570 <BMP180_Get_PressureDatas+0x24c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a72      	ldr	r2, [pc, #456]	; (8001570 <BMP180_Get_PressureDatas+0x24c>)
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f85c 	bl	800046c <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <BMP180_Get_PressureDatas+0x254>)
 80013ba:	f7ff f9eb 	bl	8000794 <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4620      	mov	r0, r4
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7ff f8bb 	bl	8000540 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b69      	ldr	r3, [pc, #420]	; (800157c <BMP180_Get_PressureDatas+0x258>)
 80013d8:	f7ff f9dc 	bl	8000794 <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fb5c 	bl	8000aa0 <__aeabi_d2iz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a65      	ldr	r2, [pc, #404]	; (8001580 <BMP180_Get_PressureDatas+0x25c>)
 80013ec:	6013      	str	r3, [r2, #0]
	X2  = (AC2 * B6 / pow(2,11));
 80013ee:	4b65      	ldr	r3, [pc, #404]	; (8001584 <BMP180_Get_PressureDatas+0x260>)
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <BMP180_Get_PressureDatas+0x24c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f834 	bl	800046c <__aeabi_i2d>
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b5c      	ldr	r3, [pc, #368]	; (800157c <BMP180_Get_PressureDatas+0x258>)
 800140a:	f7ff f9c3 	bl	8000794 <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb43 	bl	8000aa0 <__aeabi_d2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <BMP180_Get_PressureDatas+0x264>)
 800141e:	6013      	str	r3, [r2, #0]
	X3  = (X1 + X2);
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <BMP180_Get_PressureDatas+0x25c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <BMP180_Get_PressureDatas+0x264>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	4a58      	ldr	r2, [pc, #352]	; (800158c <BMP180_Get_PressureDatas+0x268>)
 800142c:	6013      	str	r3, [r2, #0]
	B3  = ((((AC1 * 4 + X3) << OverSamplingSetting) +2) / 4);
 800142e:	4b58      	ldr	r3, [pc, #352]	; (8001590 <BMP180_Get_PressureDatas+0x26c>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	4b55      	ldr	r3, [pc, #340]	; (800158c <BMP180_Get_PressureDatas+0x268>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	3302      	adds	r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <BMP180_Get_PressureDatas+0x122>
 8001444:	3303      	adds	r3, #3
 8001446:	109b      	asrs	r3, r3, #2
 8001448:	461a      	mov	r2, r3
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <BMP180_Get_PressureDatas+0x270>)
 800144c:	601a      	str	r2, [r3, #0]
	X1  = (AC3 * B6 / pow(2,13));
 800144e:	4b52      	ldr	r3, [pc, #328]	; (8001598 <BMP180_Get_PressureDatas+0x274>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	461a      	mov	r2, r3
 8001456:	4b46      	ldr	r3, [pc, #280]	; (8001570 <BMP180_Get_PressureDatas+0x24c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f804 	bl	800046c <__aeabi_i2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b4c      	ldr	r3, [pc, #304]	; (800159c <BMP180_Get_PressureDatas+0x278>)
 800146a:	f7ff f993 	bl	8000794 <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb13 	bl	8000aa0 <__aeabi_d2iz>
 800147a:	4603      	mov	r3, r0
 800147c:	4a40      	ldr	r2, [pc, #256]	; (8001580 <BMP180_Get_PressureDatas+0x25c>)
 800147e:	6013      	str	r3, [r2, #0]
	X2  = ((B1*(B6 * B6 / pow(2,12))) / pow(2,16));
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <BMP180_Get_PressureDatas+0x27c>)
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fff0 	bl	800046c <__aeabi_i2d>
 800148c:	4604      	mov	r4, r0
 800148e:	460d      	mov	r5, r1
 8001490:	4b37      	ldr	r3, [pc, #220]	; (8001570 <BMP180_Get_PressureDatas+0x24c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a36      	ldr	r2, [pc, #216]	; (8001570 <BMP180_Get_PressureDatas+0x24c>)
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffe5 	bl	800046c <__aeabi_i2d>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <BMP180_Get_PressureDatas+0x254>)
 80014a8:	f7ff f974 	bl	8000794 <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f844 	bl	8000540 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <BMP180_Get_PressureDatas+0x280>)
 80014c6:	f7ff f965 	bl	8000794 <__aeabi_ddiv>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fae5 	bl	8000aa0 <__aeabi_d2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a2b      	ldr	r2, [pc, #172]	; (8001588 <BMP180_Get_PressureDatas+0x264>)
 80014da:	6013      	str	r3, [r2, #0]
	X3  = (((X1 + X2) + 2) / 4);
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <BMP180_Get_PressureDatas+0x25c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <BMP180_Get_PressureDatas+0x264>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4413      	add	r3, r2
 80014e6:	3302      	adds	r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da00      	bge.n	80014ee <BMP180_Get_PressureDatas+0x1ca>
 80014ec:	3303      	adds	r3, #3
 80014ee:	109b      	asrs	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <BMP180_Get_PressureDatas+0x268>)
 80014f4:	601a      	str	r2, [r3, #0]
	B4  = (AC4 * (X3 + 32768)/pow(2,15));
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <BMP180_Get_PressureDatas+0x284>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <BMP180_Get_PressureDatas+0x268>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ffaf 	bl	800046c <__aeabi_i2d>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <BMP180_Get_PressureDatas+0x288>)
 8001514:	f7ff f93e 	bl	8000794 <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fae6 	bl	8000af0 <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <BMP180_Get_PressureDatas+0x28c>)
 8001528:	6013      	str	r3, [r2, #0]
	B7  = (((Uncompensated_Pressure - B3)) * (50000 >> OverSamplingSetting));
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <BMP180_Get_PressureDatas+0x244>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <BMP180_Get_PressureDatas+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f641 026a 	movw	r2, #6250	; 0x186a
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <BMP180_Get_PressureDatas+0x290>)
 8001540:	601a      	str	r2, [r3, #0]

	if(B7 < 0x80000000){
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <BMP180_Get_PressureDatas+0x290>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db38      	blt.n	80015bc <BMP180_Get_PressureDatas+0x298>
		Real_Presssure = ((B7 * 2) / B4);
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <BMP180_Get_PressureDatas+0x290>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	005a      	lsls	r2, r3, #1
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <BMP180_Get_PressureDatas+0x28c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fbb2 f3f3 	udiv	r3, r2, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <BMP180_Get_PressureDatas+0x294>)
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e037      	b.n	80015d0 <BMP180_Get_PressureDatas+0x2ac>
 8001560:	08004af8 	.word	0x08004af8
 8001564:	200000d8 	.word	0x200000d8
 8001568:	200000cc 	.word	0x200000cc
 800156c:	200000ac 	.word	0x200000ac
 8001570:	200000c8 	.word	0x200000c8
 8001574:	2000009a 	.word	0x2000009a
 8001578:	40b00000 	.word	0x40b00000
 800157c:	40a00000 	.word	0x40a00000
 8001580:	200000a4 	.word	0x200000a4
 8001584:	2000008e 	.word	0x2000008e
 8001588:	200000a8 	.word	0x200000a8
 800158c:	200000c0 	.word	0x200000c0
 8001590:	2000008c 	.word	0x2000008c
 8001594:	200000c4 	.word	0x200000c4
 8001598:	20000090 	.word	0x20000090
 800159c:	40c00000 	.word	0x40c00000
 80015a0:	20000098 	.word	0x20000098
 80015a4:	40f00000 	.word	0x40f00000
 80015a8:	20000092 	.word	0x20000092
 80015ac:	40e00000 	.word	0x40e00000
 80015b0:	200000b8 	.word	0x200000b8
 80015b4:	200000bc 	.word	0x200000bc
 80015b8:	200000d0 	.word	0x200000d0
	}
	else{
		Real_Presssure = ((B7 / B4) * 2);
 80015bc:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <BMP180_Get_PressureDatas+0x3ac>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <BMP180_Get_PressureDatas+0x3b0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <BMP180_Get_PressureDatas+0x3b4>)
 80015ce:	601a      	str	r2, [r3, #0]
	}

	X1 = (Real_Presssure / pow(2,8)) * (Real_Presssure / pow(2,8));
 80015d0:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <BMP180_Get_PressureDatas+0x3b4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff49 	bl	800046c <__aeabi_i2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <BMP180_Get_PressureDatas+0x3b8>)
 80015e0:	f7ff f8d8 	bl	8000794 <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4614      	mov	r4, r2
 80015ea:	461d      	mov	r5, r3
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <BMP180_Get_PressureDatas+0x3b4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff3b 	bl	800046c <__aeabi_i2d>
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <BMP180_Get_PressureDatas+0x3b8>)
 80015fc:	f7ff f8ca 	bl	8000794 <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe ff9a 	bl	8000540 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fa44 	bl	8000aa0 <__aeabi_d2iz>
 8001618:	4603      	mov	r3, r0
 800161a:	4a31      	ldr	r2, [pc, #196]	; (80016e0 <BMP180_Get_PressureDatas+0x3bc>)
 800161c:	6013      	str	r3, [r2, #0]
	X1 = ((X1 * 3038) / pow(2,16));
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <BMP180_Get_PressureDatas+0x3bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f640 32de 	movw	r2, #3038	; 0xbde
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff1e 	bl	800046c <__aeabi_i2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <BMP180_Get_PressureDatas+0x3c0>)
 8001636:	f7ff f8ad 	bl	8000794 <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fa2d 	bl	8000aa0 <__aeabi_d2iz>
 8001646:	4603      	mov	r3, r0
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <BMP180_Get_PressureDatas+0x3bc>)
 800164a:	6013      	str	r3, [r2, #0]
	X2 = (((-7357) * Real_Presssure) / pow(2,16));
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <BMP180_Get_PressureDatas+0x3b4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <BMP180_Get_PressureDatas+0x3c4>)
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff08 	bl	800046c <__aeabi_i2d>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <BMP180_Get_PressureDatas+0x3c0>)
 8001662:	f7ff f897 	bl	8000794 <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa17 	bl	8000aa0 <__aeabi_d2iz>
 8001672:	4603      	mov	r3, r0
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <BMP180_Get_PressureDatas+0x3c8>)
 8001676:	6013      	str	r3, [r2, #0]
	Real_Presssure = (Real_Presssure + (X1 + X2 + 3791) / pow(2,4));
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <BMP180_Get_PressureDatas+0x3b4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fef5 	bl	800046c <__aeabi_i2d>
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <BMP180_Get_PressureDatas+0x3bc>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <BMP180_Get_PressureDatas+0x3c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fee9 	bl	800046c <__aeabi_i2d>
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <BMP180_Get_PressureDatas+0x3cc>)
 80016a0:	f7ff f878 	bl	8000794 <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4620      	mov	r0, r4
 80016aa:	4629      	mov	r1, r5
 80016ac:	f7fe fd92 	bl	80001d4 <__adddf3>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff f9f2 	bl	8000aa0 <__aeabi_d2iz>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <BMP180_Get_PressureDatas+0x3b4>)
 80016c0:	6013      	str	r3, [r2, #0]
	return Real_Presssure;
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <BMP180_Get_PressureDatas+0x3b4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bdb0      	pop	{r4, r5, r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200000bc 	.word	0x200000bc
 80016d4:	200000b8 	.word	0x200000b8
 80016d8:	200000d0 	.word	0x200000d0
 80016dc:	40700000 	.word	0x40700000
 80016e0:	200000a4 	.word	0x200000a4
 80016e4:	40f00000 	.word	0x40f00000
 80016e8:	ffffe343 	.word	0xffffe343
 80016ec:	200000a8 	.word	0x200000a8
 80016f0:	40300000 	.word	0x40300000
 80016f4:	00000000 	.word	0x00000000

080016f8 <BMP180_Get_AltitudeDatas>:
/**
 * @fn     long BMP180_Get_AltitudeDatas(void)
 * @brief  This function provide to calculate Real Altitude Values by using  Real_Pressure Values
 * @retval Real_Pressure
 */
long BMP180_Get_AltitudeDatas(void){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0

	long k = BMP180_Get_PressureDatas();
 80016fe:	f7ff fe11 	bl	8001324 <BMP180_Get_PressureDatas>
 8001702:	6078      	str	r0, [r7, #4]
	Altitude = 44330 * (1-(pow((k /(float)101325),0.19029495718)));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001780 <BMP180_Get_AltitudeDatas+0x88>
 8001712:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001716:	ee16 0a90 	vmov	r0, s13
 800171a:	f7fe feb9 	bl	8000490 <__aeabi_f2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001770 <BMP180_Get_AltitudeDatas+0x78>
 8001726:	ec43 2b10 	vmov	d0, r2, r3
 800172a:	f002 fa9f 	bl	8003c6c <pow>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	f04f 0000 	mov.w	r0, #0
 8001736:	4913      	ldr	r1, [pc, #76]	; (8001784 <BMP180_Get_AltitudeDatas+0x8c>)
 8001738:	f7fe fd4a 	bl	80001d0 <__aeabi_dsub>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	a30c      	add	r3, pc, #48	; (adr r3, 8001778 <BMP180_Get_AltitudeDatas+0x80>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe fef9 	bl	8000540 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f9a3 	bl	8000aa0 <__aeabi_d2iz>
 800175a:	4603      	mov	r3, r0
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <BMP180_Get_AltitudeDatas+0x90>)
 800175e:	6013      	str	r3, [r2, #0]
	return Altitude;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <BMP180_Get_AltitudeDatas+0x90>)
 8001762:	681b      	ldr	r3, [r3, #0]

}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	f3af 8000 	nop.w
 8001770:	ccd745e4 	.word	0xccd745e4
 8001774:	3fc85b95 	.word	0x3fc85b95
 8001778:	00000000 	.word	0x00000000
 800177c:	40e5a540 	.word	0x40e5a540
 8001780:	47c5e680 	.word	0x47c5e680
 8001784:	3ff00000 	.word	0x3ff00000
 8001788:	200000d4 	.word	0x200000d4

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001790:	f000 f9d6 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001794:	f000 f80e 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001798:	f000 f8a4 	bl	80018e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800179c:	f000 f874 	bl	8001888 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 BMP180_Init();
 80017a0:	f7ff fb44 	bl	8000e2c <BMP180_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP180_Get_TempatureDatas();
 80017a4:	f7ff fd44 	bl	8001230 <BMP180_Get_TempatureDatas>
	  BMP180_Get_PressureDatas();
 80017a8:	f7ff fdbc 	bl	8001324 <BMP180_Get_PressureDatas>
	  BMP180_Get_AltitudeDatas();
 80017ac:	f7ff ffa4 	bl	80016f8 <BMP180_Get_AltitudeDatas>
	  BMP180_Get_TempatureDatas();
 80017b0:	e7f8      	b.n	80017a4 <main+0x18>
	...

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	; 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	2230      	movs	r2, #48	; 0x30
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fa20 	bl	8003c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <SystemClock_Config+0xcc>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <SystemClock_Config+0xcc>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <SystemClock_Config+0xd0>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <SystemClock_Config+0xd0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001814:	2301      	movs	r3, #1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001818:	2310      	movs	r3, #16
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181c:	2302      	movs	r3, #2
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001824:	2308      	movs	r3, #8
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001828:	23a8      	movs	r3, #168	; 0xa8
 800182a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001830:	2304      	movs	r3, #4
 8001832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fda1 	bl	8003380 <HAL_RCC_OscConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001844:	f000 f8a0 	bl	8001988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001848:	230f      	movs	r3, #15
 800184a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184c:	2302      	movs	r3, #2
 800184e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2105      	movs	r1, #5
 8001866:	4618      	mov	r0, r3
 8001868:	f002 f802 	bl	8003870 <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001872:	f000 f889 	bl	8001988 <Error_Handler>
  }
}
 8001876:	bf00      	nop
 8001878:	3750      	adds	r7, #80	; 0x50
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_I2C1_Init+0x50>)
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <MX_I2C1_Init+0x54>)
 8001890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_I2C1_Init+0x50>)
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x58>)
 8001896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_I2C1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018c6:	f000 fc6d 	bl	80021a4 <HAL_I2C_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018d0:	f000 f85a 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000d8 	.word	0x200000d8
 80018dc:	40005400 	.word	0x40005400
 80018e0:	00061a80 	.word	0x00061a80

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <MX_GPIO_Init+0x9c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <MX_GPIO_Init+0x9c>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_GPIO_Init+0x9c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <MX_GPIO_Init+0x9c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <MX_GPIO_Init+0x9c>)
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_GPIO_Init+0x9c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_GPIO_Init+0x9c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <MX_GPIO_Init+0x9c>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_GPIO_Init+0x9c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <MX_GPIO_Init+0xa0>)
 8001956:	f000 fc0b 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800195a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_GPIO_Init+0xa0>)
 8001974:	f000 fa60 	bl	8001e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	40020c00 	.word	0x40020c00

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	e7fe      	b.n	8001990 <Error_Handler+0x8>
	...

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_I2C_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12b      	bne.n	8001a5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a22:	23c0      	movs	r3, #192	; 0xc0
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a26:	2312      	movs	r3, #18
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a32:	2304      	movs	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <HAL_I2C_MspInit+0x8c>)
 8001a3e:	f000 f9fb 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	; 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac0:	f000 f890 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b16:	f7ff ffd7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f002 f883 	bl	8003c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff fe35 	bl	800178c <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b30:	08004b58 	.word	0x08004b58
  ldr r2, =_sbss
 8001b34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b38:	20000268 	.word	0x20000268

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f931 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff ff0e 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f93b 	bl	8001e1e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f911 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	2000012c 	.word	0x2000012c

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000012c 	.word	0x2000012c

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff47 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff5c 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffb0 	bl	8001d8c <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e16b      	b.n	800212c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 815a 	bne.w	8002126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80b4 	beq.w	8002126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b60      	ldr	r3, [pc, #384]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_GPIO_Init+0x30c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a5b      	ldr	r2, [pc, #364]	; (8002148 <HAL_GPIO_Init+0x310>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_GPIO_Init+0x314>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a51      	ldr	r2, [pc, #324]	; (8002150 <HAL_GPIO_Init+0x318>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_GPIO_Init+0x31c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4f      	ldr	r2, [pc, #316]	; (8002158 <HAL_GPIO_Init+0x320>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_GPIO_Init+0x324>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4d      	ldr	r2, [pc, #308]	; (8002160 <HAL_GPIO_Init+0x328>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x212>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x20a>
 800203e:	2307      	movs	r3, #7
 8002040:	e00e      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002042:	2308      	movs	r3, #8
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002046:	2306      	movs	r3, #6
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	; (8002148 <HAL_GPIO_Init+0x310>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_GPIO_Init+0x334>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a32      	ldr	r2, [pc, #200]	; (800216c <HAL_GPIO_Init+0x334>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_GPIO_Init+0x334>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_GPIO_Init+0x334>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <HAL_GPIO_Init+0x334>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_GPIO_Init+0x334>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_GPIO_Init+0x334>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_GPIO_Init+0x334>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae90 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800
 8002168:	40021c00 	.word	0x40021c00
 800216c:	40013c00 	.word	0x40013c00

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e12b      	b.n	800240e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fc0a 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	; 0x24
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002208:	f001 fcea 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 800220c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a81      	ldr	r2, [pc, #516]	; (8002418 <HAL_I2C_Init+0x274>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d807      	bhi.n	8002228 <HAL_I2C_Init+0x84>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a80      	ldr	r2, [pc, #512]	; (800241c <HAL_I2C_Init+0x278>)
 800221c:	4293      	cmp	r3, r2
 800221e:	bf94      	ite	ls
 8002220:	2301      	movls	r3, #1
 8002222:	2300      	movhi	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e006      	b.n	8002236 <HAL_I2C_Init+0x92>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a7d      	ldr	r2, [pc, #500]	; (8002420 <HAL_I2C_Init+0x27c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0e7      	b.n	800240e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a78      	ldr	r2, [pc, #480]	; (8002424 <HAL_I2C_Init+0x280>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0c9b      	lsrs	r3, r3, #18
 8002248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a6a      	ldr	r2, [pc, #424]	; (8002418 <HAL_I2C_Init+0x274>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d802      	bhi.n	8002278 <HAL_I2C_Init+0xd4>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3301      	adds	r3, #1
 8002276:	e009      	b.n	800228c <HAL_I2C_Init+0xe8>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	4a69      	ldr	r2, [pc, #420]	; (8002428 <HAL_I2C_Init+0x284>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	3301      	adds	r3, #1
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	430b      	orrs	r3, r1
 8002292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800229e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	495c      	ldr	r1, [pc, #368]	; (8002418 <HAL_I2C_Init+0x274>)
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d819      	bhi.n	80022e0 <HAL_I2C_Init+0x13c>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e59      	subs	r1, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ba:	1c59      	adds	r1, r3, #1
 80022bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022c0:	400b      	ands	r3, r1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_I2C_Init+0x138>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e59      	subs	r1, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022da:	e051      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 80022dc:	2304      	movs	r3, #4
 80022de:	e04f      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <HAL_I2C_Init+0x168>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e012      	b.n	8002332 <HAL_I2C_Init+0x18e>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	0099      	lsls	r1, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x196>
 8002336:	2301      	movs	r3, #1
 8002338:	e022      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10e      	bne.n	8002360 <HAL_I2C_Init+0x1bc>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e58      	subs	r0, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	440b      	add	r3, r1
 8002350:	fbb0 f3f3 	udiv	r3, r0, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235e:	e00f      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	0099      	lsls	r1, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	fbb0 f3f3 	udiv	r3, r0, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	6809      	ldr	r1, [r1, #0]
 8002384:	4313      	orrs	r3, r2
 8002386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6911      	ldr	r1, [r2, #16]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	4311      	orrs	r1, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	000186a0 	.word	0x000186a0
 800241c:	001e847f 	.word	0x001e847f
 8002420:	003d08ff 	.word	0x003d08ff
 8002424:	431bde83 	.word	0x431bde83
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002446:	f7ff fbe1 	bl	8001c0c <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	f040 80d9 	bne.w	800260c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	2201      	movs	r2, #1
 8002462:	496d      	ldr	r1, [pc, #436]	; (8002618 <HAL_I2C_Mem_Write+0x1ec>)
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fdad 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
 8002472:	e0cc      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Mem_Write+0x56>
 800247e:	2302      	movs	r3, #2
 8002480:	e0c5      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d007      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2221      	movs	r2, #33	; 0x21
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_I2C_Mem_Write+0x1f0>)
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ea:	88f8      	ldrh	r0, [r7, #6]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	8979      	ldrh	r1, [r7, #10]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fbe4 	bl	8002cc8 <I2C_RequestMemoryWrite>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d052      	beq.n	80025ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e081      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fe2e 	bl	8003170 <I2C_WaitOnTXEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b04      	cmp	r3, #4
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06b      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b04      	cmp	r3, #4
 8002572:	d11b      	bne.n	80025ac <HAL_I2C_Mem_Write+0x180>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d017      	beq.n	80025ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1aa      	bne.n	800250a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fe1a 	bl	80031f2 <I2C_WaitOnBTFFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d107      	bne.n	80025dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e016      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000

08002620 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08c      	sub	sp, #48	; 0x30
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800263a:	f7ff fae7 	bl	8001c0c <HAL_GetTick>
 800263e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b20      	cmp	r3, #32
 800264a:	f040 8208 	bne.w	8002a5e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2319      	movs	r3, #25
 8002654:	2201      	movs	r2, #1
 8002656:	497b      	ldr	r1, [pc, #492]	; (8002844 <HAL_I2C_Mem_Read+0x224>)
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fcb3 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
 8002666:	e1fb      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Mem_Read+0x56>
 8002672:	2302      	movs	r3, #2
 8002674:	e1f4      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d007      	beq.n	800269c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2222      	movs	r2, #34	; 0x22
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2240      	movs	r2, #64	; 0x40
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a5b      	ldr	r2, [pc, #364]	; (8002848 <HAL_I2C_Mem_Read+0x228>)
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026de:	88f8      	ldrh	r0, [r7, #6]
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4603      	mov	r3, r0
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fb80 	bl	8002df4 <I2C_RequestMemoryRead>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e1b0      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	2b00      	cmp	r3, #0
 8002704:	d113      	bne.n	800272e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e184      	b.n	8002a38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	2b01      	cmp	r3, #1
 8002734:	d11b      	bne.n	800276e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e164      	b.n	8002a38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	2b02      	cmp	r3, #2
 8002774:	d11b      	bne.n	80027ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002784:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	e144      	b.n	8002a38 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027c4:	e138      	b.n	8002a38 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	f200 80f1 	bhi.w	80029b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d123      	bne.n	8002820 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fd49 	bl	8003274 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e139      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800281e:	e10b      	b.n	8002a38 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	2b02      	cmp	r3, #2
 8002826:	d14e      	bne.n	80028c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282e:	2200      	movs	r2, #0
 8002830:	4906      	ldr	r1, [pc, #24]	; (800284c <HAL_I2C_Mem_Read+0x22c>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fbc6 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e10e      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
 8002842:	bf00      	nop
 8002844:	00100002 	.word	0x00100002
 8002848:	ffff0000 	.word	0xffff0000
 800284c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028c4:	e0b8      	b.n	8002a38 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	2200      	movs	r2, #0
 80028ce:	4966      	ldr	r1, [pc, #408]	; (8002a68 <HAL_I2C_Mem_Read+0x448>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb77 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0bf      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	2200      	movs	r2, #0
 800292a:	494f      	ldr	r1, [pc, #316]	; (8002a68 <HAL_I2C_Mem_Read+0x448>)
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fb49 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e091      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029b0:	e042      	b.n	8002a38 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fc5c 	bl	8003274 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e04c      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d118      	bne.n	8002a38 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f aec2 	bne.w	80027c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	00010004 	.word	0x00010004

08002a6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff f8c6 	bl	8001c0c <HAL_GetTick>
 8002a80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	f040 8111 	bne.w	8002cb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2319      	movs	r3, #25
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4988      	ldr	r1, [pc, #544]	; (8002cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa90 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e104      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_I2C_IsDeviceReady+0x50>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e0fd      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d007      	beq.n	8002ae2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2224      	movs	r2, #36	; 0x24
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a70      	ldr	r2, [pc, #448]	; (8002cc4 <HAL_I2C_IsDeviceReady+0x258>)
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa4e 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3c:	d103      	bne.n	8002b46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0b6      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7ff f857 	bl	8001c0c <HAL_GetTick>
 8002b5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b8e:	e025      	b.n	8002bdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7ff f83c 	bl	8001c0c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <HAL_I2C_IsDeviceReady+0x13a>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22a0      	movs	r2, #160	; 0xa0
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2ba0      	cmp	r3, #160	; 0xa0
 8002be6:	d005      	beq.n	8002bf4 <HAL_I2C_IsDeviceReady+0x188>
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <HAL_I2C_IsDeviceReady+0x188>
 8002bee:	7dbb      	ldrb	r3, [r7, #22]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0cd      	beq.n	8002b90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d129      	bne.n	8002c5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2319      	movs	r3, #25
 8002c36:	2201      	movs	r2, #1
 8002c38:	4921      	ldr	r1, [pc, #132]	; (8002cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f9c2 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e036      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e02c      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2319      	movs	r3, #25
 8002c7e:	2201      	movs	r2, #1
 8002c80:	490f      	ldr	r1, [pc, #60]	; (8002cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f99e 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e012      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f4ff af32 	bcc.w	8002b06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	00100002 	.word	0x00100002
 8002cc4:	ffff0000 	.word	0xffff0000

08002cc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	813b      	strh	r3, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f960 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d18:	d103      	bne.n	8002d22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e05f      	b.n	8002de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d26:	897b      	ldrh	r3, [r7, #10]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	492d      	ldr	r1, [pc, #180]	; (8002df0 <I2C_RequestMemoryWrite+0x128>)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f998 	bl	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e04c      	b.n	8002de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fa02 	bl	8003170 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d107      	bne.n	8002d8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e02b      	b.n	8002de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	611a      	str	r2, [r3, #16]
 8002d9e:	e021      	b.n	8002de4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002da0:	893b      	ldrh	r3, [r7, #8]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f9dc 	bl	8003170 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d107      	bne.n	8002dd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e005      	b.n	8002de6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dda:	893b      	ldrh	r3, [r7, #8]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	00010002 	.word	0x00010002

08002df4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	817b      	strh	r3, [r7, #10]
 8002e06:	460b      	mov	r3, r1
 8002e08:	813b      	strh	r3, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f8c2 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d103      	bne.n	8002e5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0aa      	b.n	8002fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	4952      	ldr	r1, [pc, #328]	; (8002fc0 <I2C_RequestMemoryRead+0x1cc>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f8fa 	bl	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e097      	b.n	8002fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f964 	bl	8003170 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d107      	bne.n	8002ec6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e076      	b.n	8002fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed0:	893b      	ldrh	r3, [r7, #8]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	e021      	b.n	8002f20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f93e 	bl	8003170 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e050      	b.n	8002fb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	6a39      	ldr	r1, [r7, #32]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f923 	bl	8003170 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d107      	bne.n	8002f48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e035      	b.n	8002fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f82b 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f82:	d103      	bne.n	8002f8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e013      	b.n	8002fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f90:	897b      	ldrh	r3, [r7, #10]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	6a3a      	ldr	r2, [r7, #32]
 8002fa4:	4906      	ldr	r1, [pc, #24]	; (8002fc0 <I2C_RequestMemoryRead+0x1cc>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f863 	bl	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	00010002 	.word	0x00010002

08002fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd4:	e025      	b.n	8003022 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d021      	beq.n	8003022 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fe fe15 	bl	8001c0c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d116      	bne.n	8003022 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f043 0220 	orr.w	r2, r3, #32
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e023      	b.n	800306a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d10d      	bne.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x84>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4013      	ands	r3, r2
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	e00c      	b.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	43da      	mvns	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4013      	ands	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	429a      	cmp	r2, r3
 8003066:	d0b6      	beq.n	8002fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003080:	e051      	b.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003090:	d123      	bne.n	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f043 0204 	orr.w	r2, r3, #4
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e046      	b.n	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d021      	beq.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fe fd93 	bl	8001c0c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d116      	bne.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e020      	b.n	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10c      	bne.n	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e00b      	b.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d18d      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800317c:	e02d      	b.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f8ce 	bl	8003320 <I2C_IsAcknowledgeFailed>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e02d      	b.n	80031ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d021      	beq.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7fe fd39 	bl	8001c0c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d116      	bne.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e007      	b.n	80031ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d1ca      	bne.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031fe:	e02d      	b.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f88d 	bl	8003320 <I2C_IsAcknowledgeFailed>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e02d      	b.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d021      	beq.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003218:	f7fe fcf8 	bl	8001c0c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d1ca      	bne.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003280:	e042      	b.n	8003308 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b10      	cmp	r3, #16
 800328e:	d119      	bne.n	80032c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0210 	mvn.w	r2, #16
 8003298:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e029      	b.n	8003318 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c4:	f7fe fca2 	bl	8001c0c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d302      	bcc.n	80032da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e007      	b.n	8003318 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d1b5      	bne.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003336:	d11b      	bne.n	8003370 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003340:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f043 0204 	orr.w	r2, r3, #4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e267      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d075      	beq.n	800348a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800339e:	4b88      	ldr	r3, [pc, #544]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00c      	beq.n	80033c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b85      	ldr	r3, [pc, #532]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d112      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c2:	d10b      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	4b7e      	ldr	r3, [pc, #504]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05b      	beq.n	8003488 <HAL_RCC_OscConfig+0x108>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d157      	bne.n	8003488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e242      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x74>
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a75      	ldr	r2, [pc, #468]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x98>
 80033fe:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6f      	ldr	r2, [pc, #444]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6c      	ldr	r2, [pc, #432]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 8003418:	4b69      	ldr	r3, [pc, #420]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a68      	ldr	r2, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a65      	ldr	r2, [pc, #404]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fbe8 	bl	8001c0c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe fbe4 	bl	8001c0c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e207      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xc0>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe fbd4 	bl	8001c0c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fbd0 	bl	8001c0c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1f3      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	4b51      	ldr	r3, [pc, #324]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0xe8>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d063      	beq.n	800355e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003496:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x152>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1c7      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4937      	ldr	r1, [pc, #220]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fe fb89 	bl	8001c0c <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fe fb85 	bl	8001c0c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1a8      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4925      	ldr	r1, [pc, #148]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fb68 	bl	8001c0c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003540:	f7fe fb64 	bl	8001c0c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e187      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d036      	beq.n	80035d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d016      	beq.n	80035a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_RCC_OscConfig+0x248>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe fb48 	bl	8001c0c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe fb44 	bl	8001c0c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e167      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x240>)
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x200>
 800359e:	e01b      	b.n	80035d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_RCC_OscConfig+0x248>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fe fb31 	bl	8001c0c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	e00e      	b.n	80035cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ae:	f7fe fb2d 	bl	8001c0c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d907      	bls.n	80035cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e150      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
 80035c0:	40023800 	.word	0x40023800
 80035c4:	42470000 	.word	0x42470000
 80035c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b88      	ldr	r3, [pc, #544]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ea      	bne.n	80035ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8097 	beq.w	8003714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b81      	ldr	r3, [pc, #516]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	4b7d      	ldr	r3, [pc, #500]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a7c      	ldr	r2, [pc, #496]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b77      	ldr	r3, [pc, #476]	; (80037f4 <HAL_RCC_OscConfig+0x474>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d118      	bne.n	8003654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003622:	4b74      	ldr	r3, [pc, #464]	; (80037f4 <HAL_RCC_OscConfig+0x474>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a73      	ldr	r2, [pc, #460]	; (80037f4 <HAL_RCC_OscConfig+0x474>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362e:	f7fe faed 	bl	8001c0c <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7fe fae9 	bl	8001c0c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e10c      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_OscConfig+0x474>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x2ea>
 800365c:	4b64      	ldr	r3, [pc, #400]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a63      	ldr	r2, [pc, #396]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	e01c      	b.n	80036a4 <HAL_RCC_OscConfig+0x324>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x30c>
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a5b      	ldr	r2, [pc, #364]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	e00b      	b.n	80036a4 <HAL_RCC_OscConfig+0x324>
 800368c:	4b58      	ldr	r3, [pc, #352]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a57      	ldr	r2, [pc, #348]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	4b55      	ldr	r3, [pc, #340]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a54      	ldr	r2, [pc, #336]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 0304 	bic.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d015      	beq.n	80036d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe faae 	bl	8001c0c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe faaa 	bl	8001c0c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0cb      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ee      	beq.n	80036b4 <HAL_RCC_OscConfig+0x334>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d8:	f7fe fa98 	bl	8001c0c <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe fa94 	bl	8001c0c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0b5      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f6:	4b3e      	ldr	r3, [pc, #248]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ee      	bne.n	80036e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a1 	beq.w	8003860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800371e:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b08      	cmp	r3, #8
 8003728:	d05c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d141      	bne.n	80037b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <HAL_RCC_OscConfig+0x478>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fe fa68 	bl	8001c0c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe fa64 	bl	8001c0c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e087      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	019b      	lsls	r3, r3, #6
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	3b01      	subs	r3, #1
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	491b      	ldr	r1, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x478>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7fe fa3d 	bl	8001c0c <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003796:	f7fe fa39 	bl	8001c0c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e05c      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x416>
 80037b4:	e054      	b.n	8003860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_RCC_OscConfig+0x478>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fa26 	bl	8001c0c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe fa22 	bl	8001c0c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e045      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_RCC_OscConfig+0x470>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x444>
 80037e2:	e03d      	b.n	8003860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e038      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40007000 	.word	0x40007000
 80037f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x4ec>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d028      	beq.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d121      	bne.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d11a      	bne.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800382c:	4013      	ands	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003834:	4293      	cmp	r3, r2
 8003836:	d111      	bne.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	3b01      	subs	r3, #1
 8003846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800

08003870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0cc      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003884:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d90c      	bls.n	80038ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d044      	beq.n	8003990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d119      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d003      	beq.n	800392e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	2b03      	cmp	r3, #3
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393e:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e067      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394e:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4934      	ldr	r1, [pc, #208]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003960:	f7fe f954 	bl	8001c0c <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fe f950 	bl	8001c0c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e04f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 020c 	and.w	r2, r3, #12
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d1eb      	bne.n	8003968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d20c      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	490a      	ldr	r1, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe f8b4 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40023c00 	.word	0x40023c00
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	08004afc 	.word	0x08004afc
 8003a34:	20000000 	.word	0x20000000
 8003a38:	20000004 	.word	0x20000004

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a40:	b090      	sub	sp, #64	; 0x40
 8003a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d00d      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x40>
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	f200 80a1 	bhi.w	8003ba8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a6e:	e09b      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a74:	e09b      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a76:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a7a:	e098      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a7c:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a86:	4b4d      	ldr	r3, [pc, #308]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d028      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a92:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	099b      	lsrs	r3, r3, #6
 8003a98:	2200      	movs	r2, #0
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa8:	fb03 f201 	mul.w	r2, r3, r1
 8003aac:	2300      	movs	r3, #0
 8003aae:	fb00 f303 	mul.w	r3, r0, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ab6:	fba0 1202 	umull	r1, r2, r0, r2
 8003aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003abc:	460a      	mov	r2, r1
 8003abe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac2:	4413      	add	r3, r2
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac8:	2200      	movs	r2, #0
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	61fa      	str	r2, [r7, #28]
 8003ace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ad6:	f7fd f82b 	bl	8000b30 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4613      	mov	r3, r2
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae2:	e053      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae4:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	2200      	movs	r2, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	617a      	str	r2, [r7, #20]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003af6:	f04f 0b00 	mov.w	fp, #0
 8003afa:	4652      	mov	r2, sl
 8003afc:	465b      	mov	r3, fp
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0c:	0150      	lsls	r0, r2, #5
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	ebb2 080a 	subs.w	r8, r2, sl
 8003b16:	eb63 090b 	sbc.w	r9, r3, fp
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b2e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b32:	eb63 0509 	sbc.w	r5, r3, r9
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	00eb      	lsls	r3, r5, #3
 8003b40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b44:	00e2      	lsls	r2, r4, #3
 8003b46:	4614      	mov	r4, r2
 8003b48:	461d      	mov	r5, r3
 8003b4a:	eb14 030a 	adds.w	r3, r4, sl
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	eb45 030b 	adc.w	r3, r5, fp
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b62:	4629      	mov	r1, r5
 8003b64:	028b      	lsls	r3, r1, #10
 8003b66:	4621      	mov	r1, r4
 8003b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	028a      	lsls	r2, r1, #10
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b76:	2200      	movs	r2, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	60fa      	str	r2, [r7, #12]
 8003b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b80:	f7fc ffd6 	bl	8000b30 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4613      	mov	r3, r2
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3740      	adds	r7, #64	; 0x40
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	017d7840 	.word	0x017d7840

08003bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000000 	.word	0x20000000

08003be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be4:	f7ff fff0 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0a9b      	lsrs	r3, r3, #10
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	08004b0c 	.word	0x08004b0c

08003c08 <memset>:
 8003c08:	4402      	add	r2, r0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d100      	bne.n	8003c12 <memset+0xa>
 8003c10:	4770      	bx	lr
 8003c12:	f803 1b01 	strb.w	r1, [r3], #1
 8003c16:	e7f9      	b.n	8003c0c <memset+0x4>

08003c18 <__errno>:
 8003c18:	4b01      	ldr	r3, [pc, #4]	; (8003c20 <__errno+0x8>)
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000058 	.word	0x20000058

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	4d0d      	ldr	r5, [pc, #52]	; (8003c5c <__libc_init_array+0x38>)
 8003c28:	4c0d      	ldr	r4, [pc, #52]	; (8003c60 <__libc_init_array+0x3c>)
 8003c2a:	1b64      	subs	r4, r4, r5
 8003c2c:	10a4      	asrs	r4, r4, #2
 8003c2e:	2600      	movs	r6, #0
 8003c30:	42a6      	cmp	r6, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	4d0b      	ldr	r5, [pc, #44]	; (8003c64 <__libc_init_array+0x40>)
 8003c36:	4c0c      	ldr	r4, [pc, #48]	; (8003c68 <__libc_init_array+0x44>)
 8003c38:	f000 ff52 	bl	8004ae0 <_init>
 8003c3c:	1b64      	subs	r4, r4, r5
 8003c3e:	10a4      	asrs	r4, r4, #2
 8003c40:	2600      	movs	r6, #0
 8003c42:	42a6      	cmp	r6, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4c:	4798      	blx	r3
 8003c4e:	3601      	adds	r6, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c56:	4798      	blx	r3
 8003c58:	3601      	adds	r6, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	08004b50 	.word	0x08004b50
 8003c60:	08004b50 	.word	0x08004b50
 8003c64:	08004b50 	.word	0x08004b50
 8003c68:	08004b54 	.word	0x08004b54

08003c6c <pow>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	ed2d 8b02 	vpush	{d8}
 8003c72:	eeb0 8a40 	vmov.f32	s16, s0
 8003c76:	eef0 8a60 	vmov.f32	s17, s1
 8003c7a:	ec55 4b11 	vmov	r4, r5, d1
 8003c7e:	f000 f873 	bl	8003d68 <__ieee754_pow>
 8003c82:	4622      	mov	r2, r4
 8003c84:	462b      	mov	r3, r5
 8003c86:	4620      	mov	r0, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	ec57 6b10 	vmov	r6, r7, d0
 8003c8e:	f7fc fef1 	bl	8000a74 <__aeabi_dcmpun>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d13b      	bne.n	8003d0e <pow+0xa2>
 8003c96:	ec51 0b18 	vmov	r0, r1, d8
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f7fc feb7 	bl	8000a10 <__aeabi_dcmpeq>
 8003ca2:	b1b8      	cbz	r0, 8003cd4 <pow+0x68>
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4629      	mov	r1, r5
 8003cac:	f7fc feb0 	bl	8000a10 <__aeabi_dcmpeq>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d146      	bne.n	8003d42 <pow+0xd6>
 8003cb4:	ec45 4b10 	vmov	d0, r4, r5
 8003cb8:	f000 f848 	bl	8003d4c <finite>
 8003cbc:	b338      	cbz	r0, 8003d0e <pow+0xa2>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7fc fead 	bl	8000a24 <__aeabi_dcmplt>
 8003cca:	b300      	cbz	r0, 8003d0e <pow+0xa2>
 8003ccc:	f7ff ffa4 	bl	8003c18 <__errno>
 8003cd0:	2322      	movs	r3, #34	; 0x22
 8003cd2:	e01b      	b.n	8003d0c <pow+0xa0>
 8003cd4:	ec47 6b10 	vmov	d0, r6, r7
 8003cd8:	f000 f838 	bl	8003d4c <finite>
 8003cdc:	b9e0      	cbnz	r0, 8003d18 <pow+0xac>
 8003cde:	eeb0 0a48 	vmov.f32	s0, s16
 8003ce2:	eef0 0a68 	vmov.f32	s1, s17
 8003ce6:	f000 f831 	bl	8003d4c <finite>
 8003cea:	b1a8      	cbz	r0, 8003d18 <pow+0xac>
 8003cec:	ec45 4b10 	vmov	d0, r4, r5
 8003cf0:	f000 f82c 	bl	8003d4c <finite>
 8003cf4:	b180      	cbz	r0, 8003d18 <pow+0xac>
 8003cf6:	4632      	mov	r2, r6
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	4639      	mov	r1, r7
 8003cfe:	f7fc feb9 	bl	8000a74 <__aeabi_dcmpun>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d0e2      	beq.n	8003ccc <pow+0x60>
 8003d06:	f7ff ff87 	bl	8003c18 <__errno>
 8003d0a:	2321      	movs	r3, #33	; 0x21
 8003d0c:	6003      	str	r3, [r0, #0]
 8003d0e:	ecbd 8b02 	vpop	{d8}
 8003d12:	ec47 6b10 	vmov	d0, r6, r7
 8003d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	4639      	mov	r1, r7
 8003d20:	f7fc fe76 	bl	8000a10 <__aeabi_dcmpeq>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d0f2      	beq.n	8003d0e <pow+0xa2>
 8003d28:	eeb0 0a48 	vmov.f32	s0, s16
 8003d2c:	eef0 0a68 	vmov.f32	s1, s17
 8003d30:	f000 f80c 	bl	8003d4c <finite>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d0ea      	beq.n	8003d0e <pow+0xa2>
 8003d38:	ec45 4b10 	vmov	d0, r4, r5
 8003d3c:	f000 f806 	bl	8003d4c <finite>
 8003d40:	e7c3      	b.n	8003cca <pow+0x5e>
 8003d42:	4f01      	ldr	r7, [pc, #4]	; (8003d48 <pow+0xdc>)
 8003d44:	2600      	movs	r6, #0
 8003d46:	e7e2      	b.n	8003d0e <pow+0xa2>
 8003d48:	3ff00000 	.word	0x3ff00000

08003d4c <finite>:
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	ed8d 0b00 	vstr	d0, [sp]
 8003d52:	9801      	ldr	r0, [sp, #4]
 8003d54:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003d58:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003d5c:	0fc0      	lsrs	r0, r0, #31
 8003d5e:	b002      	add	sp, #8
 8003d60:	4770      	bx	lr
 8003d62:	0000      	movs	r0, r0
 8003d64:	0000      	movs	r0, r0
	...

08003d68 <__ieee754_pow>:
 8003d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6c:	ed2d 8b06 	vpush	{d8-d10}
 8003d70:	b089      	sub	sp, #36	; 0x24
 8003d72:	ed8d 1b00 	vstr	d1, [sp]
 8003d76:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003d7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003d7e:	ea58 0102 	orrs.w	r1, r8, r2
 8003d82:	ec57 6b10 	vmov	r6, r7, d0
 8003d86:	d115      	bne.n	8003db4 <__ieee754_pow+0x4c>
 8003d88:	19b3      	adds	r3, r6, r6
 8003d8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003d8e:	4152      	adcs	r2, r2
 8003d90:	4299      	cmp	r1, r3
 8003d92:	4b89      	ldr	r3, [pc, #548]	; (8003fb8 <__ieee754_pow+0x250>)
 8003d94:	4193      	sbcs	r3, r2
 8003d96:	f080 84d1 	bcs.w	800473c <__ieee754_pow+0x9d4>
 8003d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d9e:	4630      	mov	r0, r6
 8003da0:	4639      	mov	r1, r7
 8003da2:	f7fc fa17 	bl	80001d4 <__adddf3>
 8003da6:	ec41 0b10 	vmov	d0, r0, r1
 8003daa:	b009      	add	sp, #36	; 0x24
 8003dac:	ecbd 8b06 	vpop	{d8-d10}
 8003db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db4:	4b81      	ldr	r3, [pc, #516]	; (8003fbc <__ieee754_pow+0x254>)
 8003db6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003dba:	429c      	cmp	r4, r3
 8003dbc:	ee10 aa10 	vmov	sl, s0
 8003dc0:	463d      	mov	r5, r7
 8003dc2:	dc06      	bgt.n	8003dd2 <__ieee754_pow+0x6a>
 8003dc4:	d101      	bne.n	8003dca <__ieee754_pow+0x62>
 8003dc6:	2e00      	cmp	r6, #0
 8003dc8:	d1e7      	bne.n	8003d9a <__ieee754_pow+0x32>
 8003dca:	4598      	cmp	r8, r3
 8003dcc:	dc01      	bgt.n	8003dd2 <__ieee754_pow+0x6a>
 8003dce:	d10f      	bne.n	8003df0 <__ieee754_pow+0x88>
 8003dd0:	b172      	cbz	r2, 8003df0 <__ieee754_pow+0x88>
 8003dd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003dd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003dda:	ea55 050a 	orrs.w	r5, r5, sl
 8003dde:	d1dc      	bne.n	8003d9a <__ieee754_pow+0x32>
 8003de0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003de4:	18db      	adds	r3, r3, r3
 8003de6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003dea:	4152      	adcs	r2, r2
 8003dec:	429d      	cmp	r5, r3
 8003dee:	e7d0      	b.n	8003d92 <__ieee754_pow+0x2a>
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	da3b      	bge.n	8003e6c <__ieee754_pow+0x104>
 8003df4:	4b72      	ldr	r3, [pc, #456]	; (8003fc0 <__ieee754_pow+0x258>)
 8003df6:	4598      	cmp	r8, r3
 8003df8:	dc51      	bgt.n	8003e9e <__ieee754_pow+0x136>
 8003dfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003dfe:	4598      	cmp	r8, r3
 8003e00:	f340 84ab 	ble.w	800475a <__ieee754_pow+0x9f2>
 8003e04:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003e08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003e0c:	2b14      	cmp	r3, #20
 8003e0e:	dd0f      	ble.n	8003e30 <__ieee754_pow+0xc8>
 8003e10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003e14:	fa22 f103 	lsr.w	r1, r2, r3
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	f040 849c 	bne.w	800475a <__ieee754_pow+0x9f2>
 8003e22:	f001 0101 	and.w	r1, r1, #1
 8003e26:	f1c1 0302 	rsb	r3, r1, #2
 8003e2a:	9304      	str	r3, [sp, #16]
 8003e2c:	b182      	cbz	r2, 8003e50 <__ieee754_pow+0xe8>
 8003e2e:	e05f      	b.n	8003ef0 <__ieee754_pow+0x188>
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	d15b      	bne.n	8003eec <__ieee754_pow+0x184>
 8003e34:	f1c3 0314 	rsb	r3, r3, #20
 8003e38:	fa48 f103 	asr.w	r1, r8, r3
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	4543      	cmp	r3, r8
 8003e42:	f040 8487 	bne.w	8004754 <__ieee754_pow+0x9ec>
 8003e46:	f001 0101 	and.w	r1, r1, #1
 8003e4a:	f1c1 0302 	rsb	r3, r1, #2
 8003e4e:	9304      	str	r3, [sp, #16]
 8003e50:	4b5c      	ldr	r3, [pc, #368]	; (8003fc4 <__ieee754_pow+0x25c>)
 8003e52:	4598      	cmp	r8, r3
 8003e54:	d132      	bne.n	8003ebc <__ieee754_pow+0x154>
 8003e56:	f1b9 0f00 	cmp.w	r9, #0
 8003e5a:	f280 8477 	bge.w	800474c <__ieee754_pow+0x9e4>
 8003e5e:	4959      	ldr	r1, [pc, #356]	; (8003fc4 <__ieee754_pow+0x25c>)
 8003e60:	4632      	mov	r2, r6
 8003e62:	463b      	mov	r3, r7
 8003e64:	2000      	movs	r0, #0
 8003e66:	f7fc fc95 	bl	8000794 <__aeabi_ddiv>
 8003e6a:	e79c      	b.n	8003da6 <__ieee754_pow+0x3e>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	d13d      	bne.n	8003ef0 <__ieee754_pow+0x188>
 8003e74:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <__ieee754_pow+0x254>)
 8003e76:	4598      	cmp	r8, r3
 8003e78:	d1ea      	bne.n	8003e50 <__ieee754_pow+0xe8>
 8003e7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003e7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003e82:	ea53 030a 	orrs.w	r3, r3, sl
 8003e86:	f000 8459 	beq.w	800473c <__ieee754_pow+0x9d4>
 8003e8a:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <__ieee754_pow+0x260>)
 8003e8c:	429c      	cmp	r4, r3
 8003e8e:	dd08      	ble.n	8003ea2 <__ieee754_pow+0x13a>
 8003e90:	f1b9 0f00 	cmp.w	r9, #0
 8003e94:	f2c0 8456 	blt.w	8004744 <__ieee754_pow+0x9dc>
 8003e98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e9c:	e783      	b.n	8003da6 <__ieee754_pow+0x3e>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e7e5      	b.n	8003e6e <__ieee754_pow+0x106>
 8003ea2:	f1b9 0f00 	cmp.w	r9, #0
 8003ea6:	f04f 0000 	mov.w	r0, #0
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	f6bf af7a 	bge.w	8003da6 <__ieee754_pow+0x3e>
 8003eb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003eb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003eba:	e774      	b.n	8003da6 <__ieee754_pow+0x3e>
 8003ebc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003ec0:	d106      	bne.n	8003ed0 <__ieee754_pow+0x168>
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	4639      	mov	r1, r7
 8003eca:	f7fc fb39 	bl	8000540 <__aeabi_dmul>
 8003ece:	e76a      	b.n	8003da6 <__ieee754_pow+0x3e>
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <__ieee754_pow+0x264>)
 8003ed2:	4599      	cmp	r9, r3
 8003ed4:	d10c      	bne.n	8003ef0 <__ieee754_pow+0x188>
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	db0a      	blt.n	8003ef0 <__ieee754_pow+0x188>
 8003eda:	ec47 6b10 	vmov	d0, r6, r7
 8003ede:	b009      	add	sp, #36	; 0x24
 8003ee0:	ecbd 8b06 	vpop	{d8-d10}
 8003ee4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee8:	f000 bd20 	b.w	800492c <__ieee754_sqrt>
 8003eec:	2300      	movs	r3, #0
 8003eee:	9304      	str	r3, [sp, #16]
 8003ef0:	ec47 6b10 	vmov	d0, r6, r7
 8003ef4:	f000 fc62 	bl	80047bc <fabs>
 8003ef8:	ec51 0b10 	vmov	r0, r1, d0
 8003efc:	f1ba 0f00 	cmp.w	sl, #0
 8003f00:	d129      	bne.n	8003f56 <__ieee754_pow+0x1ee>
 8003f02:	b124      	cbz	r4, 8003f0e <__ieee754_pow+0x1a6>
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <__ieee754_pow+0x25c>)
 8003f06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d123      	bne.n	8003f56 <__ieee754_pow+0x1ee>
 8003f0e:	f1b9 0f00 	cmp.w	r9, #0
 8003f12:	da05      	bge.n	8003f20 <__ieee754_pow+0x1b8>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	2000      	movs	r0, #0
 8003f1a:	492a      	ldr	r1, [pc, #168]	; (8003fc4 <__ieee754_pow+0x25c>)
 8003f1c:	f7fc fc3a 	bl	8000794 <__aeabi_ddiv>
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	f6bf af40 	bge.w	8003da6 <__ieee754_pow+0x3e>
 8003f26:	9b04      	ldr	r3, [sp, #16]
 8003f28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003f2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003f30:	431c      	orrs	r4, r3
 8003f32:	d108      	bne.n	8003f46 <__ieee754_pow+0x1de>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f7fc f948 	bl	80001d0 <__aeabi_dsub>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	e78f      	b.n	8003e66 <__ieee754_pow+0xfe>
 8003f46:	9b04      	ldr	r3, [sp, #16]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f47f af2c 	bne.w	8003da6 <__ieee754_pow+0x3e>
 8003f4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f52:	4619      	mov	r1, r3
 8003f54:	e727      	b.n	8003da6 <__ieee754_pow+0x3e>
 8003f56:	0feb      	lsrs	r3, r5, #31
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	9306      	str	r3, [sp, #24]
 8003f5c:	9a06      	ldr	r2, [sp, #24]
 8003f5e:	9b04      	ldr	r3, [sp, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	d102      	bne.n	8003f6a <__ieee754_pow+0x202>
 8003f64:	4632      	mov	r2, r6
 8003f66:	463b      	mov	r3, r7
 8003f68:	e7e6      	b.n	8003f38 <__ieee754_pow+0x1d0>
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <__ieee754_pow+0x268>)
 8003f6c:	4598      	cmp	r8, r3
 8003f6e:	f340 80fb 	ble.w	8004168 <__ieee754_pow+0x400>
 8003f72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003f76:	4598      	cmp	r8, r3
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <__ieee754_pow+0x260>)
 8003f7a:	dd0c      	ble.n	8003f96 <__ieee754_pow+0x22e>
 8003f7c:	429c      	cmp	r4, r3
 8003f7e:	dc0f      	bgt.n	8003fa0 <__ieee754_pow+0x238>
 8003f80:	f1b9 0f00 	cmp.w	r9, #0
 8003f84:	da0f      	bge.n	8003fa6 <__ieee754_pow+0x23e>
 8003f86:	2000      	movs	r0, #0
 8003f88:	b009      	add	sp, #36	; 0x24
 8003f8a:	ecbd 8b06 	vpop	{d8-d10}
 8003f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f92:	f000 bcc2 	b.w	800491a <__math_oflow>
 8003f96:	429c      	cmp	r4, r3
 8003f98:	dbf2      	blt.n	8003f80 <__ieee754_pow+0x218>
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <__ieee754_pow+0x25c>)
 8003f9c:	429c      	cmp	r4, r3
 8003f9e:	dd19      	ble.n	8003fd4 <__ieee754_pow+0x26c>
 8003fa0:	f1b9 0f00 	cmp.w	r9, #0
 8003fa4:	dcef      	bgt.n	8003f86 <__ieee754_pow+0x21e>
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	b009      	add	sp, #36	; 0x24
 8003faa:	ecbd 8b06 	vpop	{d8-d10}
 8003fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb2:	f000 bca9 	b.w	8004908 <__math_uflow>
 8003fb6:	bf00      	nop
 8003fb8:	fff00000 	.word	0xfff00000
 8003fbc:	7ff00000 	.word	0x7ff00000
 8003fc0:	433fffff 	.word	0x433fffff
 8003fc4:	3ff00000 	.word	0x3ff00000
 8003fc8:	3fefffff 	.word	0x3fefffff
 8003fcc:	3fe00000 	.word	0x3fe00000
 8003fd0:	41e00000 	.word	0x41e00000
 8003fd4:	4b60      	ldr	r3, [pc, #384]	; (8004158 <__ieee754_pow+0x3f0>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f7fc f8fa 	bl	80001d0 <__aeabi_dsub>
 8003fdc:	a354      	add	r3, pc, #336	; (adr r3, 8004130 <__ieee754_pow+0x3c8>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	460d      	mov	r5, r1
 8003fe6:	f7fc faab 	bl	8000540 <__aeabi_dmul>
 8003fea:	a353      	add	r3, pc, #332	; (adr r3, 8004138 <__ieee754_pow+0x3d0>)
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	460f      	mov	r7, r1
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f7fc faa2 	bl	8000540 <__aeabi_dmul>
 8003ffc:	4b57      	ldr	r3, [pc, #348]	; (800415c <__ieee754_pow+0x3f4>)
 8003ffe:	4682      	mov	sl, r0
 8004000:	468b      	mov	fp, r1
 8004002:	2200      	movs	r2, #0
 8004004:	4620      	mov	r0, r4
 8004006:	4629      	mov	r1, r5
 8004008:	f7fc fa9a 	bl	8000540 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	a14b      	add	r1, pc, #300	; (adr r1, 8004140 <__ieee754_pow+0x3d8>)
 8004012:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004016:	f7fc f8db 	bl	80001d0 <__aeabi_dsub>
 800401a:	4622      	mov	r2, r4
 800401c:	462b      	mov	r3, r5
 800401e:	f7fc fa8f 	bl	8000540 <__aeabi_dmul>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	2000      	movs	r0, #0
 8004028:	494d      	ldr	r1, [pc, #308]	; (8004160 <__ieee754_pow+0x3f8>)
 800402a:	f7fc f8d1 	bl	80001d0 <__aeabi_dsub>
 800402e:	4622      	mov	r2, r4
 8004030:	4680      	mov	r8, r0
 8004032:	4689      	mov	r9, r1
 8004034:	462b      	mov	r3, r5
 8004036:	4620      	mov	r0, r4
 8004038:	4629      	mov	r1, r5
 800403a:	f7fc fa81 	bl	8000540 <__aeabi_dmul>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4640      	mov	r0, r8
 8004044:	4649      	mov	r1, r9
 8004046:	f7fc fa7b 	bl	8000540 <__aeabi_dmul>
 800404a:	a33f      	add	r3, pc, #252	; (adr r3, 8004148 <__ieee754_pow+0x3e0>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f7fc fa76 	bl	8000540 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4650      	mov	r0, sl
 800405a:	4659      	mov	r1, fp
 800405c:	f7fc f8b8 	bl	80001d0 <__aeabi_dsub>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4680      	mov	r8, r0
 8004066:	4689      	mov	r9, r1
 8004068:	4630      	mov	r0, r6
 800406a:	4639      	mov	r1, r7
 800406c:	f7fc f8b2 	bl	80001d4 <__adddf3>
 8004070:	2000      	movs	r0, #0
 8004072:	4632      	mov	r2, r6
 8004074:	463b      	mov	r3, r7
 8004076:	4604      	mov	r4, r0
 8004078:	460d      	mov	r5, r1
 800407a:	f7fc f8a9 	bl	80001d0 <__aeabi_dsub>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4640      	mov	r0, r8
 8004084:	4649      	mov	r1, r9
 8004086:	f7fc f8a3 	bl	80001d0 <__aeabi_dsub>
 800408a:	9b04      	ldr	r3, [sp, #16]
 800408c:	9a06      	ldr	r2, [sp, #24]
 800408e:	3b01      	subs	r3, #1
 8004090:	4313      	orrs	r3, r2
 8004092:	4682      	mov	sl, r0
 8004094:	468b      	mov	fp, r1
 8004096:	f040 81e7 	bne.w	8004468 <__ieee754_pow+0x700>
 800409a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004150 <__ieee754_pow+0x3e8>
 800409e:	eeb0 8a47 	vmov.f32	s16, s14
 80040a2:	eef0 8a67 	vmov.f32	s17, s15
 80040a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80040aa:	2600      	movs	r6, #0
 80040ac:	4632      	mov	r2, r6
 80040ae:	463b      	mov	r3, r7
 80040b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040b4:	f7fc f88c 	bl	80001d0 <__aeabi_dsub>
 80040b8:	4622      	mov	r2, r4
 80040ba:	462b      	mov	r3, r5
 80040bc:	f7fc fa40 	bl	8000540 <__aeabi_dmul>
 80040c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040c4:	4680      	mov	r8, r0
 80040c6:	4689      	mov	r9, r1
 80040c8:	4650      	mov	r0, sl
 80040ca:	4659      	mov	r1, fp
 80040cc:	f7fc fa38 	bl	8000540 <__aeabi_dmul>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4640      	mov	r0, r8
 80040d6:	4649      	mov	r1, r9
 80040d8:	f7fc f87c 	bl	80001d4 <__adddf3>
 80040dc:	4632      	mov	r2, r6
 80040de:	463b      	mov	r3, r7
 80040e0:	4680      	mov	r8, r0
 80040e2:	4689      	mov	r9, r1
 80040e4:	4620      	mov	r0, r4
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7fc fa2a 	bl	8000540 <__aeabi_dmul>
 80040ec:	460b      	mov	r3, r1
 80040ee:	4604      	mov	r4, r0
 80040f0:	460d      	mov	r5, r1
 80040f2:	4602      	mov	r2, r0
 80040f4:	4649      	mov	r1, r9
 80040f6:	4640      	mov	r0, r8
 80040f8:	f7fc f86c 	bl	80001d4 <__adddf3>
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <__ieee754_pow+0x3fc>)
 80040fe:	4299      	cmp	r1, r3
 8004100:	ec45 4b19 	vmov	d9, r4, r5
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	468b      	mov	fp, r1
 800410a:	f340 82f0 	ble.w	80046ee <__ieee754_pow+0x986>
 800410e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004112:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004116:	4303      	orrs	r3, r0
 8004118:	f000 81e4 	beq.w	80044e4 <__ieee754_pow+0x77c>
 800411c:	ec51 0b18 	vmov	r0, r1, d8
 8004120:	2200      	movs	r2, #0
 8004122:	2300      	movs	r3, #0
 8004124:	f7fc fc7e 	bl	8000a24 <__aeabi_dcmplt>
 8004128:	3800      	subs	r0, #0
 800412a:	bf18      	it	ne
 800412c:	2001      	movne	r0, #1
 800412e:	e72b      	b.n	8003f88 <__ieee754_pow+0x220>
 8004130:	60000000 	.word	0x60000000
 8004134:	3ff71547 	.word	0x3ff71547
 8004138:	f85ddf44 	.word	0xf85ddf44
 800413c:	3e54ae0b 	.word	0x3e54ae0b
 8004140:	55555555 	.word	0x55555555
 8004144:	3fd55555 	.word	0x3fd55555
 8004148:	652b82fe 	.word	0x652b82fe
 800414c:	3ff71547 	.word	0x3ff71547
 8004150:	00000000 	.word	0x00000000
 8004154:	bff00000 	.word	0xbff00000
 8004158:	3ff00000 	.word	0x3ff00000
 800415c:	3fd00000 	.word	0x3fd00000
 8004160:	3fe00000 	.word	0x3fe00000
 8004164:	408fffff 	.word	0x408fffff
 8004168:	4bd5      	ldr	r3, [pc, #852]	; (80044c0 <__ieee754_pow+0x758>)
 800416a:	402b      	ands	r3, r5
 800416c:	2200      	movs	r2, #0
 800416e:	b92b      	cbnz	r3, 800417c <__ieee754_pow+0x414>
 8004170:	4bd4      	ldr	r3, [pc, #848]	; (80044c4 <__ieee754_pow+0x75c>)
 8004172:	f7fc f9e5 	bl	8000540 <__aeabi_dmul>
 8004176:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800417a:	460c      	mov	r4, r1
 800417c:	1523      	asrs	r3, r4, #20
 800417e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004182:	4413      	add	r3, r2
 8004184:	9305      	str	r3, [sp, #20]
 8004186:	4bd0      	ldr	r3, [pc, #832]	; (80044c8 <__ieee754_pow+0x760>)
 8004188:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800418c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004190:	429c      	cmp	r4, r3
 8004192:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004196:	dd08      	ble.n	80041aa <__ieee754_pow+0x442>
 8004198:	4bcc      	ldr	r3, [pc, #816]	; (80044cc <__ieee754_pow+0x764>)
 800419a:	429c      	cmp	r4, r3
 800419c:	f340 8162 	ble.w	8004464 <__ieee754_pow+0x6fc>
 80041a0:	9b05      	ldr	r3, [sp, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	9305      	str	r3, [sp, #20]
 80041a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80041aa:	2400      	movs	r4, #0
 80041ac:	00e3      	lsls	r3, r4, #3
 80041ae:	9307      	str	r3, [sp, #28]
 80041b0:	4bc7      	ldr	r3, [pc, #796]	; (80044d0 <__ieee754_pow+0x768>)
 80041b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041b6:	ed93 7b00 	vldr	d7, [r3]
 80041ba:	4629      	mov	r1, r5
 80041bc:	ec53 2b17 	vmov	r2, r3, d7
 80041c0:	eeb0 9a47 	vmov.f32	s18, s14
 80041c4:	eef0 9a67 	vmov.f32	s19, s15
 80041c8:	4682      	mov	sl, r0
 80041ca:	f7fc f801 	bl	80001d0 <__aeabi_dsub>
 80041ce:	4652      	mov	r2, sl
 80041d0:	4606      	mov	r6, r0
 80041d2:	460f      	mov	r7, r1
 80041d4:	462b      	mov	r3, r5
 80041d6:	ec51 0b19 	vmov	r0, r1, d9
 80041da:	f7fb fffb 	bl	80001d4 <__adddf3>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	2000      	movs	r0, #0
 80041e4:	49bb      	ldr	r1, [pc, #748]	; (80044d4 <__ieee754_pow+0x76c>)
 80041e6:	f7fc fad5 	bl	8000794 <__aeabi_ddiv>
 80041ea:	ec41 0b1a 	vmov	d10, r0, r1
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4630      	mov	r0, r6
 80041f4:	4639      	mov	r1, r7
 80041f6:	f7fc f9a3 	bl	8000540 <__aeabi_dmul>
 80041fa:	2300      	movs	r3, #0
 80041fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004200:	9302      	str	r3, [sp, #8]
 8004202:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004206:	46ab      	mov	fp, r5
 8004208:	106d      	asrs	r5, r5, #1
 800420a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800420e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004212:	ec41 0b18 	vmov	d8, r0, r1
 8004216:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800421a:	2200      	movs	r2, #0
 800421c:	4640      	mov	r0, r8
 800421e:	4649      	mov	r1, r9
 8004220:	4614      	mov	r4, r2
 8004222:	461d      	mov	r5, r3
 8004224:	f7fc f98c 	bl	8000540 <__aeabi_dmul>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4630      	mov	r0, r6
 800422e:	4639      	mov	r1, r7
 8004230:	f7fb ffce 	bl	80001d0 <__aeabi_dsub>
 8004234:	ec53 2b19 	vmov	r2, r3, d9
 8004238:	4606      	mov	r6, r0
 800423a:	460f      	mov	r7, r1
 800423c:	4620      	mov	r0, r4
 800423e:	4629      	mov	r1, r5
 8004240:	f7fb ffc6 	bl	80001d0 <__aeabi_dsub>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4650      	mov	r0, sl
 800424a:	4659      	mov	r1, fp
 800424c:	f7fb ffc0 	bl	80001d0 <__aeabi_dsub>
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	f7fc f974 	bl	8000540 <__aeabi_dmul>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4630      	mov	r0, r6
 800425e:	4639      	mov	r1, r7
 8004260:	f7fb ffb6 	bl	80001d0 <__aeabi_dsub>
 8004264:	ec53 2b1a 	vmov	r2, r3, d10
 8004268:	f7fc f96a 	bl	8000540 <__aeabi_dmul>
 800426c:	ec53 2b18 	vmov	r2, r3, d8
 8004270:	ec41 0b19 	vmov	d9, r0, r1
 8004274:	ec51 0b18 	vmov	r0, r1, d8
 8004278:	f7fc f962 	bl	8000540 <__aeabi_dmul>
 800427c:	a37c      	add	r3, pc, #496	; (adr r3, 8004470 <__ieee754_pow+0x708>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	4604      	mov	r4, r0
 8004284:	460d      	mov	r5, r1
 8004286:	f7fc f95b 	bl	8000540 <__aeabi_dmul>
 800428a:	a37b      	add	r3, pc, #492	; (adr r3, 8004478 <__ieee754_pow+0x710>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fb ffa0 	bl	80001d4 <__adddf3>
 8004294:	4622      	mov	r2, r4
 8004296:	462b      	mov	r3, r5
 8004298:	f7fc f952 	bl	8000540 <__aeabi_dmul>
 800429c:	a378      	add	r3, pc, #480	; (adr r3, 8004480 <__ieee754_pow+0x718>)
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f7fb ff97 	bl	80001d4 <__adddf3>
 80042a6:	4622      	mov	r2, r4
 80042a8:	462b      	mov	r3, r5
 80042aa:	f7fc f949 	bl	8000540 <__aeabi_dmul>
 80042ae:	a376      	add	r3, pc, #472	; (adr r3, 8004488 <__ieee754_pow+0x720>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fb ff8e 	bl	80001d4 <__adddf3>
 80042b8:	4622      	mov	r2, r4
 80042ba:	462b      	mov	r3, r5
 80042bc:	f7fc f940 	bl	8000540 <__aeabi_dmul>
 80042c0:	a373      	add	r3, pc, #460	; (adr r3, 8004490 <__ieee754_pow+0x728>)
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f7fb ff85 	bl	80001d4 <__adddf3>
 80042ca:	4622      	mov	r2, r4
 80042cc:	462b      	mov	r3, r5
 80042ce:	f7fc f937 	bl	8000540 <__aeabi_dmul>
 80042d2:	a371      	add	r3, pc, #452	; (adr r3, 8004498 <__ieee754_pow+0x730>)
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f7fb ff7c 	bl	80001d4 <__adddf3>
 80042dc:	4622      	mov	r2, r4
 80042de:	4606      	mov	r6, r0
 80042e0:	460f      	mov	r7, r1
 80042e2:	462b      	mov	r3, r5
 80042e4:	4620      	mov	r0, r4
 80042e6:	4629      	mov	r1, r5
 80042e8:	f7fc f92a 	bl	8000540 <__aeabi_dmul>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4630      	mov	r0, r6
 80042f2:	4639      	mov	r1, r7
 80042f4:	f7fc f924 	bl	8000540 <__aeabi_dmul>
 80042f8:	4642      	mov	r2, r8
 80042fa:	4604      	mov	r4, r0
 80042fc:	460d      	mov	r5, r1
 80042fe:	464b      	mov	r3, r9
 8004300:	ec51 0b18 	vmov	r0, r1, d8
 8004304:	f7fb ff66 	bl	80001d4 <__adddf3>
 8004308:	ec53 2b19 	vmov	r2, r3, d9
 800430c:	f7fc f918 	bl	8000540 <__aeabi_dmul>
 8004310:	4622      	mov	r2, r4
 8004312:	462b      	mov	r3, r5
 8004314:	f7fb ff5e 	bl	80001d4 <__adddf3>
 8004318:	4642      	mov	r2, r8
 800431a:	4682      	mov	sl, r0
 800431c:	468b      	mov	fp, r1
 800431e:	464b      	mov	r3, r9
 8004320:	4640      	mov	r0, r8
 8004322:	4649      	mov	r1, r9
 8004324:	f7fc f90c 	bl	8000540 <__aeabi_dmul>
 8004328:	4b6b      	ldr	r3, [pc, #428]	; (80044d8 <__ieee754_pow+0x770>)
 800432a:	2200      	movs	r2, #0
 800432c:	4606      	mov	r6, r0
 800432e:	460f      	mov	r7, r1
 8004330:	f7fb ff50 	bl	80001d4 <__adddf3>
 8004334:	4652      	mov	r2, sl
 8004336:	465b      	mov	r3, fp
 8004338:	f7fb ff4c 	bl	80001d4 <__adddf3>
 800433c:	2000      	movs	r0, #0
 800433e:	4604      	mov	r4, r0
 8004340:	460d      	mov	r5, r1
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4640      	mov	r0, r8
 8004348:	4649      	mov	r1, r9
 800434a:	f7fc f8f9 	bl	8000540 <__aeabi_dmul>
 800434e:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <__ieee754_pow+0x770>)
 8004350:	4680      	mov	r8, r0
 8004352:	4689      	mov	r9, r1
 8004354:	2200      	movs	r2, #0
 8004356:	4620      	mov	r0, r4
 8004358:	4629      	mov	r1, r5
 800435a:	f7fb ff39 	bl	80001d0 <__aeabi_dsub>
 800435e:	4632      	mov	r2, r6
 8004360:	463b      	mov	r3, r7
 8004362:	f7fb ff35 	bl	80001d0 <__aeabi_dsub>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4650      	mov	r0, sl
 800436c:	4659      	mov	r1, fp
 800436e:	f7fb ff2f 	bl	80001d0 <__aeabi_dsub>
 8004372:	ec53 2b18 	vmov	r2, r3, d8
 8004376:	f7fc f8e3 	bl	8000540 <__aeabi_dmul>
 800437a:	4622      	mov	r2, r4
 800437c:	4606      	mov	r6, r0
 800437e:	460f      	mov	r7, r1
 8004380:	462b      	mov	r3, r5
 8004382:	ec51 0b19 	vmov	r0, r1, d9
 8004386:	f7fc f8db 	bl	8000540 <__aeabi_dmul>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4630      	mov	r0, r6
 8004390:	4639      	mov	r1, r7
 8004392:	f7fb ff1f 	bl	80001d4 <__adddf3>
 8004396:	4606      	mov	r6, r0
 8004398:	460f      	mov	r7, r1
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4640      	mov	r0, r8
 80043a0:	4649      	mov	r1, r9
 80043a2:	f7fb ff17 	bl	80001d4 <__adddf3>
 80043a6:	a33e      	add	r3, pc, #248	; (adr r3, 80044a0 <__ieee754_pow+0x738>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	2000      	movs	r0, #0
 80043ae:	4604      	mov	r4, r0
 80043b0:	460d      	mov	r5, r1
 80043b2:	f7fc f8c5 	bl	8000540 <__aeabi_dmul>
 80043b6:	4642      	mov	r2, r8
 80043b8:	ec41 0b18 	vmov	d8, r0, r1
 80043bc:	464b      	mov	r3, r9
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f7fb ff05 	bl	80001d0 <__aeabi_dsub>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4630      	mov	r0, r6
 80043cc:	4639      	mov	r1, r7
 80043ce:	f7fb feff 	bl	80001d0 <__aeabi_dsub>
 80043d2:	a335      	add	r3, pc, #212	; (adr r3, 80044a8 <__ieee754_pow+0x740>)
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f7fc f8b2 	bl	8000540 <__aeabi_dmul>
 80043dc:	a334      	add	r3, pc, #208	; (adr r3, 80044b0 <__ieee754_pow+0x748>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	4606      	mov	r6, r0
 80043e4:	460f      	mov	r7, r1
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f7fc f8a9 	bl	8000540 <__aeabi_dmul>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4630      	mov	r0, r6
 80043f4:	4639      	mov	r1, r7
 80043f6:	f7fb feed 	bl	80001d4 <__adddf3>
 80043fa:	9a07      	ldr	r2, [sp, #28]
 80043fc:	4b37      	ldr	r3, [pc, #220]	; (80044dc <__ieee754_pow+0x774>)
 80043fe:	4413      	add	r3, r2
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f7fb fee6 	bl	80001d4 <__adddf3>
 8004408:	4682      	mov	sl, r0
 800440a:	9805      	ldr	r0, [sp, #20]
 800440c:	468b      	mov	fp, r1
 800440e:	f7fc f82d 	bl	800046c <__aeabi_i2d>
 8004412:	9a07      	ldr	r2, [sp, #28]
 8004414:	4b32      	ldr	r3, [pc, #200]	; (80044e0 <__ieee754_pow+0x778>)
 8004416:	4413      	add	r3, r2
 8004418:	e9d3 8900 	ldrd	r8, r9, [r3]
 800441c:	4606      	mov	r6, r0
 800441e:	460f      	mov	r7, r1
 8004420:	4652      	mov	r2, sl
 8004422:	465b      	mov	r3, fp
 8004424:	ec51 0b18 	vmov	r0, r1, d8
 8004428:	f7fb fed4 	bl	80001d4 <__adddf3>
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	f7fb fed0 	bl	80001d4 <__adddf3>
 8004434:	4632      	mov	r2, r6
 8004436:	463b      	mov	r3, r7
 8004438:	f7fb fecc 	bl	80001d4 <__adddf3>
 800443c:	2000      	movs	r0, #0
 800443e:	4632      	mov	r2, r6
 8004440:	463b      	mov	r3, r7
 8004442:	4604      	mov	r4, r0
 8004444:	460d      	mov	r5, r1
 8004446:	f7fb fec3 	bl	80001d0 <__aeabi_dsub>
 800444a:	4642      	mov	r2, r8
 800444c:	464b      	mov	r3, r9
 800444e:	f7fb febf 	bl	80001d0 <__aeabi_dsub>
 8004452:	ec53 2b18 	vmov	r2, r3, d8
 8004456:	f7fb febb 	bl	80001d0 <__aeabi_dsub>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4650      	mov	r0, sl
 8004460:	4659      	mov	r1, fp
 8004462:	e610      	b.n	8004086 <__ieee754_pow+0x31e>
 8004464:	2401      	movs	r4, #1
 8004466:	e6a1      	b.n	80041ac <__ieee754_pow+0x444>
 8004468:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80044b8 <__ieee754_pow+0x750>
 800446c:	e617      	b.n	800409e <__ieee754_pow+0x336>
 800446e:	bf00      	nop
 8004470:	4a454eef 	.word	0x4a454eef
 8004474:	3fca7e28 	.word	0x3fca7e28
 8004478:	93c9db65 	.word	0x93c9db65
 800447c:	3fcd864a 	.word	0x3fcd864a
 8004480:	a91d4101 	.word	0xa91d4101
 8004484:	3fd17460 	.word	0x3fd17460
 8004488:	518f264d 	.word	0x518f264d
 800448c:	3fd55555 	.word	0x3fd55555
 8004490:	db6fabff 	.word	0xdb6fabff
 8004494:	3fdb6db6 	.word	0x3fdb6db6
 8004498:	33333303 	.word	0x33333303
 800449c:	3fe33333 	.word	0x3fe33333
 80044a0:	e0000000 	.word	0xe0000000
 80044a4:	3feec709 	.word	0x3feec709
 80044a8:	dc3a03fd 	.word	0xdc3a03fd
 80044ac:	3feec709 	.word	0x3feec709
 80044b0:	145b01f5 	.word	0x145b01f5
 80044b4:	be3e2fe0 	.word	0xbe3e2fe0
 80044b8:	00000000 	.word	0x00000000
 80044bc:	3ff00000 	.word	0x3ff00000
 80044c0:	7ff00000 	.word	0x7ff00000
 80044c4:	43400000 	.word	0x43400000
 80044c8:	0003988e 	.word	0x0003988e
 80044cc:	000bb679 	.word	0x000bb679
 80044d0:	08004b18 	.word	0x08004b18
 80044d4:	3ff00000 	.word	0x3ff00000
 80044d8:	40080000 	.word	0x40080000
 80044dc:	08004b38 	.word	0x08004b38
 80044e0:	08004b28 	.word	0x08004b28
 80044e4:	a3b3      	add	r3, pc, #716	; (adr r3, 80047b4 <__ieee754_pow+0xa4c>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	4640      	mov	r0, r8
 80044ec:	4649      	mov	r1, r9
 80044ee:	f7fb fe71 	bl	80001d4 <__adddf3>
 80044f2:	4622      	mov	r2, r4
 80044f4:	ec41 0b1a 	vmov	d10, r0, r1
 80044f8:	462b      	mov	r3, r5
 80044fa:	4630      	mov	r0, r6
 80044fc:	4639      	mov	r1, r7
 80044fe:	f7fb fe67 	bl	80001d0 <__aeabi_dsub>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	ec51 0b1a 	vmov	r0, r1, d10
 800450a:	f7fc faa9 	bl	8000a60 <__aeabi_dcmpgt>
 800450e:	2800      	cmp	r0, #0
 8004510:	f47f ae04 	bne.w	800411c <__ieee754_pow+0x3b4>
 8004514:	4aa2      	ldr	r2, [pc, #648]	; (80047a0 <__ieee754_pow+0xa38>)
 8004516:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800451a:	4293      	cmp	r3, r2
 800451c:	f340 8107 	ble.w	800472e <__ieee754_pow+0x9c6>
 8004520:	151b      	asrs	r3, r3, #20
 8004522:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004526:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800452a:	fa4a fa03 	asr.w	sl, sl, r3
 800452e:	44da      	add	sl, fp
 8004530:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004534:	489b      	ldr	r0, [pc, #620]	; (80047a4 <__ieee754_pow+0xa3c>)
 8004536:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800453a:	4108      	asrs	r0, r1
 800453c:	ea00 030a 	and.w	r3, r0, sl
 8004540:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004544:	f1c1 0114 	rsb	r1, r1, #20
 8004548:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800454c:	fa4a fa01 	asr.w	sl, sl, r1
 8004550:	f1bb 0f00 	cmp.w	fp, #0
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	bfb8      	it	lt
 800455e:	f1ca 0a00 	rsblt	sl, sl, #0
 8004562:	f7fb fe35 	bl	80001d0 <__aeabi_dsub>
 8004566:	ec41 0b19 	vmov	d9, r0, r1
 800456a:	4642      	mov	r2, r8
 800456c:	464b      	mov	r3, r9
 800456e:	ec51 0b19 	vmov	r0, r1, d9
 8004572:	f7fb fe2f 	bl	80001d4 <__adddf3>
 8004576:	a37a      	add	r3, pc, #488	; (adr r3, 8004760 <__ieee754_pow+0x9f8>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	2000      	movs	r0, #0
 800457e:	4604      	mov	r4, r0
 8004580:	460d      	mov	r5, r1
 8004582:	f7fb ffdd 	bl	8000540 <__aeabi_dmul>
 8004586:	ec53 2b19 	vmov	r2, r3, d9
 800458a:	4606      	mov	r6, r0
 800458c:	460f      	mov	r7, r1
 800458e:	4620      	mov	r0, r4
 8004590:	4629      	mov	r1, r5
 8004592:	f7fb fe1d 	bl	80001d0 <__aeabi_dsub>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4640      	mov	r0, r8
 800459c:	4649      	mov	r1, r9
 800459e:	f7fb fe17 	bl	80001d0 <__aeabi_dsub>
 80045a2:	a371      	add	r3, pc, #452	; (adr r3, 8004768 <__ieee754_pow+0xa00>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f7fb ffca 	bl	8000540 <__aeabi_dmul>
 80045ac:	a370      	add	r3, pc, #448	; (adr r3, 8004770 <__ieee754_pow+0xa08>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	4680      	mov	r8, r0
 80045b4:	4689      	mov	r9, r1
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fb ffc1 	bl	8000540 <__aeabi_dmul>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4640      	mov	r0, r8
 80045c4:	4649      	mov	r1, r9
 80045c6:	f7fb fe05 	bl	80001d4 <__adddf3>
 80045ca:	4604      	mov	r4, r0
 80045cc:	460d      	mov	r5, r1
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4630      	mov	r0, r6
 80045d4:	4639      	mov	r1, r7
 80045d6:	f7fb fdfd 	bl	80001d4 <__adddf3>
 80045da:	4632      	mov	r2, r6
 80045dc:	463b      	mov	r3, r7
 80045de:	4680      	mov	r8, r0
 80045e0:	4689      	mov	r9, r1
 80045e2:	f7fb fdf5 	bl	80001d0 <__aeabi_dsub>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4620      	mov	r0, r4
 80045ec:	4629      	mov	r1, r5
 80045ee:	f7fb fdef 	bl	80001d0 <__aeabi_dsub>
 80045f2:	4642      	mov	r2, r8
 80045f4:	4606      	mov	r6, r0
 80045f6:	460f      	mov	r7, r1
 80045f8:	464b      	mov	r3, r9
 80045fa:	4640      	mov	r0, r8
 80045fc:	4649      	mov	r1, r9
 80045fe:	f7fb ff9f 	bl	8000540 <__aeabi_dmul>
 8004602:	a35d      	add	r3, pc, #372	; (adr r3, 8004778 <__ieee754_pow+0xa10>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	4604      	mov	r4, r0
 800460a:	460d      	mov	r5, r1
 800460c:	f7fb ff98 	bl	8000540 <__aeabi_dmul>
 8004610:	a35b      	add	r3, pc, #364	; (adr r3, 8004780 <__ieee754_pow+0xa18>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb fddb 	bl	80001d0 <__aeabi_dsub>
 800461a:	4622      	mov	r2, r4
 800461c:	462b      	mov	r3, r5
 800461e:	f7fb ff8f 	bl	8000540 <__aeabi_dmul>
 8004622:	a359      	add	r3, pc, #356	; (adr r3, 8004788 <__ieee754_pow+0xa20>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fb fdd4 	bl	80001d4 <__adddf3>
 800462c:	4622      	mov	r2, r4
 800462e:	462b      	mov	r3, r5
 8004630:	f7fb ff86 	bl	8000540 <__aeabi_dmul>
 8004634:	a356      	add	r3, pc, #344	; (adr r3, 8004790 <__ieee754_pow+0xa28>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fb fdc9 	bl	80001d0 <__aeabi_dsub>
 800463e:	4622      	mov	r2, r4
 8004640:	462b      	mov	r3, r5
 8004642:	f7fb ff7d 	bl	8000540 <__aeabi_dmul>
 8004646:	a354      	add	r3, pc, #336	; (adr r3, 8004798 <__ieee754_pow+0xa30>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb fdc2 	bl	80001d4 <__adddf3>
 8004650:	4622      	mov	r2, r4
 8004652:	462b      	mov	r3, r5
 8004654:	f7fb ff74 	bl	8000540 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4640      	mov	r0, r8
 800465e:	4649      	mov	r1, r9
 8004660:	f7fb fdb6 	bl	80001d0 <__aeabi_dsub>
 8004664:	4604      	mov	r4, r0
 8004666:	460d      	mov	r5, r1
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4640      	mov	r0, r8
 800466e:	4649      	mov	r1, r9
 8004670:	f7fb ff66 	bl	8000540 <__aeabi_dmul>
 8004674:	2200      	movs	r2, #0
 8004676:	ec41 0b19 	vmov	d9, r0, r1
 800467a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800467e:	4620      	mov	r0, r4
 8004680:	4629      	mov	r1, r5
 8004682:	f7fb fda5 	bl	80001d0 <__aeabi_dsub>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	ec51 0b19 	vmov	r0, r1, d9
 800468e:	f7fc f881 	bl	8000794 <__aeabi_ddiv>
 8004692:	4632      	mov	r2, r6
 8004694:	4604      	mov	r4, r0
 8004696:	460d      	mov	r5, r1
 8004698:	463b      	mov	r3, r7
 800469a:	4640      	mov	r0, r8
 800469c:	4649      	mov	r1, r9
 800469e:	f7fb ff4f 	bl	8000540 <__aeabi_dmul>
 80046a2:	4632      	mov	r2, r6
 80046a4:	463b      	mov	r3, r7
 80046a6:	f7fb fd95 	bl	80001d4 <__adddf3>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4620      	mov	r0, r4
 80046b0:	4629      	mov	r1, r5
 80046b2:	f7fb fd8d 	bl	80001d0 <__aeabi_dsub>
 80046b6:	4642      	mov	r2, r8
 80046b8:	464b      	mov	r3, r9
 80046ba:	f7fb fd89 	bl	80001d0 <__aeabi_dsub>
 80046be:	460b      	mov	r3, r1
 80046c0:	4602      	mov	r2, r0
 80046c2:	4939      	ldr	r1, [pc, #228]	; (80047a8 <__ieee754_pow+0xa40>)
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7fb fd83 	bl	80001d0 <__aeabi_dsub>
 80046ca:	ec41 0b10 	vmov	d0, r0, r1
 80046ce:	ee10 3a90 	vmov	r3, s1
 80046d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046da:	da2b      	bge.n	8004734 <__ieee754_pow+0x9cc>
 80046dc:	4650      	mov	r0, sl
 80046de:	f000 f877 	bl	80047d0 <scalbn>
 80046e2:	ec51 0b10 	vmov	r0, r1, d0
 80046e6:	ec53 2b18 	vmov	r2, r3, d8
 80046ea:	f7ff bbee 	b.w	8003eca <__ieee754_pow+0x162>
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <__ieee754_pow+0xa44>)
 80046f0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80046f4:	429e      	cmp	r6, r3
 80046f6:	f77f af0d 	ble.w	8004514 <__ieee754_pow+0x7ac>
 80046fa:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <__ieee754_pow+0xa48>)
 80046fc:	440b      	add	r3, r1
 80046fe:	4303      	orrs	r3, r0
 8004700:	d009      	beq.n	8004716 <__ieee754_pow+0x9ae>
 8004702:	ec51 0b18 	vmov	r0, r1, d8
 8004706:	2200      	movs	r2, #0
 8004708:	2300      	movs	r3, #0
 800470a:	f7fc f98b 	bl	8000a24 <__aeabi_dcmplt>
 800470e:	3800      	subs	r0, #0
 8004710:	bf18      	it	ne
 8004712:	2001      	movne	r0, #1
 8004714:	e448      	b.n	8003fa8 <__ieee754_pow+0x240>
 8004716:	4622      	mov	r2, r4
 8004718:	462b      	mov	r3, r5
 800471a:	f7fb fd59 	bl	80001d0 <__aeabi_dsub>
 800471e:	4642      	mov	r2, r8
 8004720:	464b      	mov	r3, r9
 8004722:	f7fc f993 	bl	8000a4c <__aeabi_dcmpge>
 8004726:	2800      	cmp	r0, #0
 8004728:	f43f aef4 	beq.w	8004514 <__ieee754_pow+0x7ac>
 800472c:	e7e9      	b.n	8004702 <__ieee754_pow+0x99a>
 800472e:	f04f 0a00 	mov.w	sl, #0
 8004732:	e71a      	b.n	800456a <__ieee754_pow+0x802>
 8004734:	ec51 0b10 	vmov	r0, r1, d0
 8004738:	4619      	mov	r1, r3
 800473a:	e7d4      	b.n	80046e6 <__ieee754_pow+0x97e>
 800473c:	491a      	ldr	r1, [pc, #104]	; (80047a8 <__ieee754_pow+0xa40>)
 800473e:	2000      	movs	r0, #0
 8004740:	f7ff bb31 	b.w	8003da6 <__ieee754_pow+0x3e>
 8004744:	2000      	movs	r0, #0
 8004746:	2100      	movs	r1, #0
 8004748:	f7ff bb2d 	b.w	8003da6 <__ieee754_pow+0x3e>
 800474c:	4630      	mov	r0, r6
 800474e:	4639      	mov	r1, r7
 8004750:	f7ff bb29 	b.w	8003da6 <__ieee754_pow+0x3e>
 8004754:	9204      	str	r2, [sp, #16]
 8004756:	f7ff bb7b 	b.w	8003e50 <__ieee754_pow+0xe8>
 800475a:	2300      	movs	r3, #0
 800475c:	f7ff bb65 	b.w	8003e2a <__ieee754_pow+0xc2>
 8004760:	00000000 	.word	0x00000000
 8004764:	3fe62e43 	.word	0x3fe62e43
 8004768:	fefa39ef 	.word	0xfefa39ef
 800476c:	3fe62e42 	.word	0x3fe62e42
 8004770:	0ca86c39 	.word	0x0ca86c39
 8004774:	be205c61 	.word	0xbe205c61
 8004778:	72bea4d0 	.word	0x72bea4d0
 800477c:	3e663769 	.word	0x3e663769
 8004780:	c5d26bf1 	.word	0xc5d26bf1
 8004784:	3ebbbd41 	.word	0x3ebbbd41
 8004788:	af25de2c 	.word	0xaf25de2c
 800478c:	3f11566a 	.word	0x3f11566a
 8004790:	16bebd93 	.word	0x16bebd93
 8004794:	3f66c16c 	.word	0x3f66c16c
 8004798:	5555553e 	.word	0x5555553e
 800479c:	3fc55555 	.word	0x3fc55555
 80047a0:	3fe00000 	.word	0x3fe00000
 80047a4:	fff00000 	.word	0xfff00000
 80047a8:	3ff00000 	.word	0x3ff00000
 80047ac:	4090cbff 	.word	0x4090cbff
 80047b0:	3f6f3400 	.word	0x3f6f3400
 80047b4:	652b82fe 	.word	0x652b82fe
 80047b8:	3c971547 	.word	0x3c971547

080047bc <fabs>:
 80047bc:	ec51 0b10 	vmov	r0, r1, d0
 80047c0:	ee10 2a10 	vmov	r2, s0
 80047c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80047c8:	ec43 2b10 	vmov	d0, r2, r3
 80047cc:	4770      	bx	lr
	...

080047d0 <scalbn>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	ec55 4b10 	vmov	r4, r5, d0
 80047d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80047da:	4606      	mov	r6, r0
 80047dc:	462b      	mov	r3, r5
 80047de:	b999      	cbnz	r1, 8004808 <scalbn+0x38>
 80047e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80047e4:	4323      	orrs	r3, r4
 80047e6:	d03f      	beq.n	8004868 <scalbn+0x98>
 80047e8:	4b35      	ldr	r3, [pc, #212]	; (80048c0 <scalbn+0xf0>)
 80047ea:	4629      	mov	r1, r5
 80047ec:	ee10 0a10 	vmov	r0, s0
 80047f0:	2200      	movs	r2, #0
 80047f2:	f7fb fea5 	bl	8000540 <__aeabi_dmul>
 80047f6:	4b33      	ldr	r3, [pc, #204]	; (80048c4 <scalbn+0xf4>)
 80047f8:	429e      	cmp	r6, r3
 80047fa:	4604      	mov	r4, r0
 80047fc:	460d      	mov	r5, r1
 80047fe:	da10      	bge.n	8004822 <scalbn+0x52>
 8004800:	a327      	add	r3, pc, #156	; (adr r3, 80048a0 <scalbn+0xd0>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	e01f      	b.n	8004848 <scalbn+0x78>
 8004808:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800480c:	4291      	cmp	r1, r2
 800480e:	d10c      	bne.n	800482a <scalbn+0x5a>
 8004810:	ee10 2a10 	vmov	r2, s0
 8004814:	4620      	mov	r0, r4
 8004816:	4629      	mov	r1, r5
 8004818:	f7fb fcdc 	bl	80001d4 <__adddf3>
 800481c:	4604      	mov	r4, r0
 800481e:	460d      	mov	r5, r1
 8004820:	e022      	b.n	8004868 <scalbn+0x98>
 8004822:	460b      	mov	r3, r1
 8004824:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004828:	3936      	subs	r1, #54	; 0x36
 800482a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800482e:	4296      	cmp	r6, r2
 8004830:	dd0d      	ble.n	800484e <scalbn+0x7e>
 8004832:	2d00      	cmp	r5, #0
 8004834:	a11c      	add	r1, pc, #112	; (adr r1, 80048a8 <scalbn+0xd8>)
 8004836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800483a:	da02      	bge.n	8004842 <scalbn+0x72>
 800483c:	a11c      	add	r1, pc, #112	; (adr r1, 80048b0 <scalbn+0xe0>)
 800483e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004842:	a319      	add	r3, pc, #100	; (adr r3, 80048a8 <scalbn+0xd8>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f7fb fe7a 	bl	8000540 <__aeabi_dmul>
 800484c:	e7e6      	b.n	800481c <scalbn+0x4c>
 800484e:	1872      	adds	r2, r6, r1
 8004850:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004854:	428a      	cmp	r2, r1
 8004856:	dcec      	bgt.n	8004832 <scalbn+0x62>
 8004858:	2a00      	cmp	r2, #0
 800485a:	dd08      	ble.n	800486e <scalbn+0x9e>
 800485c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004860:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004864:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004868:	ec45 4b10 	vmov	d0, r4, r5
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004872:	da08      	bge.n	8004886 <scalbn+0xb6>
 8004874:	2d00      	cmp	r5, #0
 8004876:	a10a      	add	r1, pc, #40	; (adr r1, 80048a0 <scalbn+0xd0>)
 8004878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800487c:	dac0      	bge.n	8004800 <scalbn+0x30>
 800487e:	a10e      	add	r1, pc, #56	; (adr r1, 80048b8 <scalbn+0xe8>)
 8004880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004884:	e7bc      	b.n	8004800 <scalbn+0x30>
 8004886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800488a:	3236      	adds	r2, #54	; 0x36
 800488c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004890:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004894:	4620      	mov	r0, r4
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <scalbn+0xf8>)
 8004898:	2200      	movs	r2, #0
 800489a:	e7d5      	b.n	8004848 <scalbn+0x78>
 800489c:	f3af 8000 	nop.w
 80048a0:	c2f8f359 	.word	0xc2f8f359
 80048a4:	01a56e1f 	.word	0x01a56e1f
 80048a8:	8800759c 	.word	0x8800759c
 80048ac:	7e37e43c 	.word	0x7e37e43c
 80048b0:	8800759c 	.word	0x8800759c
 80048b4:	fe37e43c 	.word	0xfe37e43c
 80048b8:	c2f8f359 	.word	0xc2f8f359
 80048bc:	81a56e1f 	.word	0x81a56e1f
 80048c0:	43500000 	.word	0x43500000
 80048c4:	ffff3cb0 	.word	0xffff3cb0
 80048c8:	3c900000 	.word	0x3c900000

080048cc <with_errno>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	4604      	mov	r4, r0
 80048d0:	460d      	mov	r5, r1
 80048d2:	4616      	mov	r6, r2
 80048d4:	f7ff f9a0 	bl	8003c18 <__errno>
 80048d8:	4629      	mov	r1, r5
 80048da:	6006      	str	r6, [r0, #0]
 80048dc:	4620      	mov	r0, r4
 80048de:	bd70      	pop	{r4, r5, r6, pc}

080048e0 <xflow>:
 80048e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048e2:	4614      	mov	r4, r2
 80048e4:	461d      	mov	r5, r3
 80048e6:	b108      	cbz	r0, 80048ec <xflow+0xc>
 80048e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80048ec:	e9cd 2300 	strd	r2, r3, [sp]
 80048f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048f4:	4620      	mov	r0, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	f7fb fe22 	bl	8000540 <__aeabi_dmul>
 80048fc:	2222      	movs	r2, #34	; 0x22
 80048fe:	b003      	add	sp, #12
 8004900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004904:	f7ff bfe2 	b.w	80048cc <with_errno>

08004908 <__math_uflow>:
 8004908:	b508      	push	{r3, lr}
 800490a:	2200      	movs	r2, #0
 800490c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004910:	f7ff ffe6 	bl	80048e0 <xflow>
 8004914:	ec41 0b10 	vmov	d0, r0, r1
 8004918:	bd08      	pop	{r3, pc}

0800491a <__math_oflow>:
 800491a:	b508      	push	{r3, lr}
 800491c:	2200      	movs	r2, #0
 800491e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004922:	f7ff ffdd 	bl	80048e0 <xflow>
 8004926:	ec41 0b10 	vmov	d0, r0, r1
 800492a:	bd08      	pop	{r3, pc}

0800492c <__ieee754_sqrt>:
 800492c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	ec55 4b10 	vmov	r4, r5, d0
 8004934:	4e67      	ldr	r6, [pc, #412]	; (8004ad4 <__ieee754_sqrt+0x1a8>)
 8004936:	43ae      	bics	r6, r5
 8004938:	ee10 0a10 	vmov	r0, s0
 800493c:	ee10 2a10 	vmov	r2, s0
 8004940:	4629      	mov	r1, r5
 8004942:	462b      	mov	r3, r5
 8004944:	d10d      	bne.n	8004962 <__ieee754_sqrt+0x36>
 8004946:	f7fb fdfb 	bl	8000540 <__aeabi_dmul>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fb fc3f 	bl	80001d4 <__adddf3>
 8004956:	4604      	mov	r4, r0
 8004958:	460d      	mov	r5, r1
 800495a:	ec45 4b10 	vmov	d0, r4, r5
 800495e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	2d00      	cmp	r5, #0
 8004964:	dc0b      	bgt.n	800497e <__ieee754_sqrt+0x52>
 8004966:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800496a:	4326      	orrs	r6, r4
 800496c:	d0f5      	beq.n	800495a <__ieee754_sqrt+0x2e>
 800496e:	b135      	cbz	r5, 800497e <__ieee754_sqrt+0x52>
 8004970:	f7fb fc2e 	bl	80001d0 <__aeabi_dsub>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	f7fb ff0c 	bl	8000794 <__aeabi_ddiv>
 800497c:	e7eb      	b.n	8004956 <__ieee754_sqrt+0x2a>
 800497e:	1509      	asrs	r1, r1, #20
 8004980:	f000 808d 	beq.w	8004a9e <__ieee754_sqrt+0x172>
 8004984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004988:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800498c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004990:	07c9      	lsls	r1, r1, #31
 8004992:	bf5c      	itt	pl
 8004994:	005b      	lslpl	r3, r3, #1
 8004996:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800499a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800499e:	bf58      	it	pl
 80049a0:	0052      	lslpl	r2, r2, #1
 80049a2:	2500      	movs	r5, #0
 80049a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80049a8:	1076      	asrs	r6, r6, #1
 80049aa:	0052      	lsls	r2, r2, #1
 80049ac:	f04f 0e16 	mov.w	lr, #22
 80049b0:	46ac      	mov	ip, r5
 80049b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049b6:	eb0c 0001 	add.w	r0, ip, r1
 80049ba:	4298      	cmp	r0, r3
 80049bc:	bfde      	ittt	le
 80049be:	1a1b      	suble	r3, r3, r0
 80049c0:	eb00 0c01 	addle.w	ip, r0, r1
 80049c4:	186d      	addle	r5, r5, r1
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	f1be 0e01 	subs.w	lr, lr, #1
 80049cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80049d0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80049d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80049d8:	d1ed      	bne.n	80049b6 <__ieee754_sqrt+0x8a>
 80049da:	4674      	mov	r4, lr
 80049dc:	2720      	movs	r7, #32
 80049de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80049e2:	4563      	cmp	r3, ip
 80049e4:	eb01 000e 	add.w	r0, r1, lr
 80049e8:	dc02      	bgt.n	80049f0 <__ieee754_sqrt+0xc4>
 80049ea:	d113      	bne.n	8004a14 <__ieee754_sqrt+0xe8>
 80049ec:	4290      	cmp	r0, r2
 80049ee:	d811      	bhi.n	8004a14 <__ieee754_sqrt+0xe8>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	eb00 0e01 	add.w	lr, r0, r1
 80049f6:	da57      	bge.n	8004aa8 <__ieee754_sqrt+0x17c>
 80049f8:	f1be 0f00 	cmp.w	lr, #0
 80049fc:	db54      	blt.n	8004aa8 <__ieee754_sqrt+0x17c>
 80049fe:	f10c 0801 	add.w	r8, ip, #1
 8004a02:	eba3 030c 	sub.w	r3, r3, ip
 8004a06:	4290      	cmp	r0, r2
 8004a08:	bf88      	it	hi
 8004a0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004a0e:	1a12      	subs	r2, r2, r0
 8004a10:	440c      	add	r4, r1
 8004a12:	46c4      	mov	ip, r8
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	3f01      	subs	r7, #1
 8004a18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004a1c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004a20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004a24:	d1dd      	bne.n	80049e2 <__ieee754_sqrt+0xb6>
 8004a26:	4313      	orrs	r3, r2
 8004a28:	d01b      	beq.n	8004a62 <__ieee754_sqrt+0x136>
 8004a2a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004ad8 <__ieee754_sqrt+0x1ac>
 8004a2e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004adc <__ieee754_sqrt+0x1b0>
 8004a32:	e9da 0100 	ldrd	r0, r1, [sl]
 8004a36:	e9db 2300 	ldrd	r2, r3, [fp]
 8004a3a:	f7fb fbc9 	bl	80001d0 <__aeabi_dsub>
 8004a3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4640      	mov	r0, r8
 8004a48:	4649      	mov	r1, r9
 8004a4a:	f7fb fff5 	bl	8000a38 <__aeabi_dcmple>
 8004a4e:	b140      	cbz	r0, 8004a62 <__ieee754_sqrt+0x136>
 8004a50:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004a54:	e9da 0100 	ldrd	r0, r1, [sl]
 8004a58:	e9db 2300 	ldrd	r2, r3, [fp]
 8004a5c:	d126      	bne.n	8004aac <__ieee754_sqrt+0x180>
 8004a5e:	3501      	adds	r5, #1
 8004a60:	463c      	mov	r4, r7
 8004a62:	106a      	asrs	r2, r5, #1
 8004a64:	0863      	lsrs	r3, r4, #1
 8004a66:	07e9      	lsls	r1, r5, #31
 8004a68:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004a6c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004a70:	bf48      	it	mi
 8004a72:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004a76:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004a7a:	461c      	mov	r4, r3
 8004a7c:	e76d      	b.n	800495a <__ieee754_sqrt+0x2e>
 8004a7e:	0ad3      	lsrs	r3, r2, #11
 8004a80:	3815      	subs	r0, #21
 8004a82:	0552      	lsls	r2, r2, #21
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0fa      	beq.n	8004a7e <__ieee754_sqrt+0x152>
 8004a88:	02dc      	lsls	r4, r3, #11
 8004a8a:	d50a      	bpl.n	8004aa2 <__ieee754_sqrt+0x176>
 8004a8c:	f1c1 0420 	rsb	r4, r1, #32
 8004a90:	fa22 f404 	lsr.w	r4, r2, r4
 8004a94:	1e4d      	subs	r5, r1, #1
 8004a96:	408a      	lsls	r2, r1
 8004a98:	4323      	orrs	r3, r4
 8004a9a:	1b41      	subs	r1, r0, r5
 8004a9c:	e772      	b.n	8004984 <__ieee754_sqrt+0x58>
 8004a9e:	4608      	mov	r0, r1
 8004aa0:	e7f0      	b.n	8004a84 <__ieee754_sqrt+0x158>
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	3101      	adds	r1, #1
 8004aa6:	e7ef      	b.n	8004a88 <__ieee754_sqrt+0x15c>
 8004aa8:	46e0      	mov	r8, ip
 8004aaa:	e7aa      	b.n	8004a02 <__ieee754_sqrt+0xd6>
 8004aac:	f7fb fb92 	bl	80001d4 <__adddf3>
 8004ab0:	e9da 8900 	ldrd	r8, r9, [sl]
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4640      	mov	r0, r8
 8004aba:	4649      	mov	r1, r9
 8004abc:	f7fb ffb2 	bl	8000a24 <__aeabi_dcmplt>
 8004ac0:	b120      	cbz	r0, 8004acc <__ieee754_sqrt+0x1a0>
 8004ac2:	1ca0      	adds	r0, r4, #2
 8004ac4:	bf08      	it	eq
 8004ac6:	3501      	addeq	r5, #1
 8004ac8:	3402      	adds	r4, #2
 8004aca:	e7ca      	b.n	8004a62 <__ieee754_sqrt+0x136>
 8004acc:	3401      	adds	r4, #1
 8004ace:	f024 0401 	bic.w	r4, r4, #1
 8004ad2:	e7c6      	b.n	8004a62 <__ieee754_sqrt+0x136>
 8004ad4:	7ff00000 	.word	0x7ff00000
 8004ad8:	20000060 	.word	0x20000060
 8004adc:	20000068 	.word	0x20000068

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
